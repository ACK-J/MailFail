// Direct send
// Lack of an SPF or DMARC record
// SPF record never specifies ~all or -all
// SPF with /16 ipv4 mecahnism, a, mx, ptr,exists, include
// DMARC policy is set to p=none or is nonexistent
// Mail Channels without domain lockdown
// Domain Doesnt exist SPF
// domain doesnt exist MX
// check if mail relaying is enabled
// DKIM < 512 and 768 bit RSA keys bit RSA Key
// extract domains from DAMRC rua= field and check them
// add a link to register the domain

// For SPF records
// - highlight all occurances of ["+all", "?all"] in red
// - highlight all occurances of ["redirect=", "exp=", "exists:"] in blue
// - highlight all occurences of ["-all", "~all"] in green
// - If no SPF record exists for the domain add a list item that states `No SPF Record Found. Email Spoofing is Possible.`
// - if the SPF record doesn't start with "v=spf1" add a list item that states "The SPF record did not start with 'v=spf1' which means it is invalid and spoofing is possible."
// - extract the domains from the include: and redirect= parts of the SPF record and use rdap.net to check if they have been registered. If they haven't been add a new list item that states `SPF Domain(s) Available to Purchase! [ ${availableDomains.join(", ")} ]` The code I wrote for this works well so you wont have to modify it too much
// - if the spf record doesn't include ~all and -all add a list item that says "Neither ~all or -all were found which means spoofing is possible."

// For DMARC
// - highlight all occurances of ["sp=none", "p=none"] in red
// - highlight all occurences of ["p=reject", "p=quarantine"] in green
// - If no DMARC record exists for the domain add a list item that states `No DMARC Record Found. Email Spoofing is Possible.`
// - if the DMARC record includes pct= and it is not set to pct=100, highlight it in red
// - if the DMARC record includes a p= policy which is no-standard ["p=none","p=quarantine","p=reject"] highlight it in red
// - if the DMARC record is missing p= add a list item that states spoofing is possible. sp is for subdomains and p is the policy for the root domain

// For MX
// - if the record includes "mail.protection.outlook.com" then add a new list item that states `Send-MailMessage -SmtpServer ${SMTPServer} -To Victim@${domainName} -From informationsecurity@${domainName} -Subject “Test” -Body “Test” -BodyAsHTML -DeliveryNotificationOption Never -Priority High`

// For BIMI
// - retrieves the SVG

// For DKIM
// - checks if selectors exist and checks the RSA-bits used
// - 512 or 768 can be cracked 

// For ARC
// - checks if selectors exist and checks the RSA-bits used
// - 512 or 768 can be cracked 

// For MTA-STS (Mail Transfer Agent Strict Transport Security)
// mta-sts.domain.com/.well-known/mta-sts.txt
// dig _mta-sts.google.com txt +short



// TEST CASES
// Is multiple SPFs okay? https://www.joinautopilot.com/
// https://www.bluestate.co/ pct= 
// _spf test case https://www.google.com/

//TODO
// Add check for .co.uk
// new DMARC bug https://www.mail.com/
// Look into DANE
// Look into DNSBL (DNS-Based Blackhole List):



let badge = 0;
browser.runtime.sendMessage({
    action: "updateBadge",
    number: ""
});

let DKIMCustomSelectors = ["0xdeadbeef", "1", "2", "3", "123", "12345", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "384", "512", "768", "allselector", "alpha", "amazonses", "amp", "api", "auth", "authsmtp", "beta", "bfi", "brj", "ca", "care", "centralsmtp", "class", "cm", "coa", "corp", "Corporate", "d2005", "d2006", "d2007", "d2008", "d2009", "d2010", "d2011", "d2012", "d2013", "d2014", "d2015", "d2016", "d2017", "d2018", "d2019", "d2020", "d2021", "d2022", "d2023", "d2024", "default", "delta", "dk", "dk01", "dk02", "dk03", "dk04", "dk05", "dk06", "dk07", "dk08", "dk09", "dk1", "dk10", "dk1024", "dk11", "dk12", "dk13", "dk14", "dk15", "dk16", "dk17", "dk18", "dk19", "dk2", "dk20", "dk2005", "dk20050327", "dk2006", "dk2007", "dk2008", "dk2009", "dk2010", "dk2011", "dk2012", "dk2013", "dk2014", "dk2015", "dk2016", "dk2017", "dk2018", "dk2019", "dk2020", "dk2021", "dk2022", "dk2023", "dk2024", "dk2048", "dk256", "dk3", "dk384", "dk4", "dk5", "dk512", "dk6", "dk7", "dk768", "dk8", "dk9", "dkim", "dkim01", "dkim02", "dkim03", "dkim04", "dkim05", "dkim06", "dkim07", "dkim08", "dkim09", "dkim1", "dkim10", "dkim1024", "dkim11", "dkim12", "dkim13", "dkim14", "dkim15", "dkim16", "dkim17", "dkim18", "dkim19", "dkim2", "dkim20", "dkim2048", "dkim256", "dkim3", "dkim384", "dkim4", "dkim5", "dkim512", "dkim6", "dkim7", "dkim768", "dkim8", "dkim9", "dkimmail", "dkimrnt", "dkrnt", "dksel", "domk", "duh", "dyn", "dynect", "eb1", "eb10", "eb11", "eb12", "eb13", "eb14", "eb15", "eb16", "eb17", "eb18", "eb19", "eb2", "eb20", "eb3", "eb4", "eb5", "eb6", "eb7", "eb8", "eb9", "ebmailerd", "ED-DKIM", "ei", "email0517", "emarsys", "emarsys1", "emarsys2", "emarsys3", "emk01", "et", "everlytickey1", "everlytickey2", "exim", "exim4u", "EXPNSER28042022", "facebook", "fm1", "fm2", "fm3", "fm4", "fm5", "fm6", "fm7", "fm8", "fm9", "gamma", "gears", "global", "gmmailerd", "google", "googleapps", "hubris", "iconzdkim", "id", "iport", "iweb", "k1", "k10", "k11", "k12", "k13", "k14", "k15", "k16", "k17", "k18", "k19", "k2", "k20", "k3", "k4", "k5", "k6", "k7", "k8", "k9", "key", "key1", "key10", "key11", "key12", "key13", "key14", "key15", "key16", "key17", "key18", "key19", "key2", "key20", "key3", "key4", "key5", "key6", "key7", "key8", "key9", "lists", "ls1", "ls10", "ls11", "ls12", "ls13", "ls14", "ls15", "ls16", "ls17", "ls18", "ls19", "ls2", "ls20", "ls3", "ls4", "ls5", "ls6", "ls7", "ls8", "ls9", "m", "m1", "m10", "m1024", "m11", "m12", "m13", "m14", "m15", "m16", "m17", "m18", "m19", "m2", "m20", "m2048", "m3", "m384", "m4", "m5", "m512", "m6", "m7", "m768", "m8", "m9", "mail", "mailchannels", "mailchannels1", "mailchannels2", "mailchannels3", "mailchannels4", "mailchannels5", "mail-dkim", "mailer", "mail-in", "mailjet", "mailo", "mailrelay", "main", "mandrill", "mcdkim", "mcdkim1", "mcdkim2", "mcdkim3", "mcdkim4", "mcdkim5", "mdaemon", "mesmtp", "mikd", "mimecast", "mimecast20230622", "mimi", "mkt", "monkey", "msa", "mx", "mxvault", "my1", "my10", "my11", "my12", "my13", "my14", "my15", "my16", "my17", "my18", "my19", "my2", "my20", "my3", "my4", "my5", "my6", "my7", "my8", "my9", "neomailout", "NewSelectorA", "one", "originating", "outbound", "pf2005", "pf2006", "pf2007", "pf2008", "pf2009", "pf2010", "pf2011", "pf2012", "pf2013", "pf2014", "pf2015", "pf2016", "pf2017", "pf2018", "pf2019", "pf2020", "pf2021", "pf2022", "pf2023", "pf2024", "pic", "pm", "pmta", "postfix", "postfix.private", "postmark", "pp", "pp1", "pp2", "pp3", "pp4", "pp5", "pp6", "pp7", "pp8", "pp9", "primary", "primus", "private", "prod", "proddkim", "proddkim1024", "proddkim2048", "proddkim256", "proddkim384", "proddkim512", "proddkim768", "proton", "protonmail", "protonmail1", "protonmail2", "protonmail3", "protonmail4", "protonmail5", "protonmail6", "protonmail7", "protonmail8", "protonmail9", "pub", "publickey", "pvt", "qcdkim", "responsys", "rit1608", "rsa", "rsa1", "rsa10", "rsa1024", "rsa11", "rsa12", "rsa13", "rsa14", "rsa15", "rsa16", "rsa17", "rsa18", "rsa19", "rsa2", "rsa20", "rsa3", "rsa384", "rsa4", "rsa5", "rsa512", "rsa6", "rsa7", "rsa768", "rsa8", "rsa9", "s", "s1", "s10", "s1024", "s11", "s12", "s13", "s14", "s15", "s16", "s17", "s18", "s19", "s2", "s20", "s2005", "s2006", "s2007", "s2008", "s2009", "s2010", "s2011", "s2012", "s2013", "s2014", "s2015", "s2016", "s2017", "s2018", "s2019", "s2020", "s2021", "s2022", "s2023", "s2024", "s2048", "s2048g1", "s3", "s384", "s4", "s5", "s512", "s6", "s7", "s768", "s8", "s9", "safe", "sailthru", "sasl", "scarlet", "scooby", "scph0121", "scph0919", "sel1", "sel10", "sel11", "sel12", "sel13", "sel14", "sel15", "sel16", "sel17", "sel18", "sel19", "sel2", "sel20", "sel3", "sel4", "sel5", "sel6", "sel7", "sel8", "sel9", "selector", "selector1", "selector10", "selector11", "selector12", "selector13", "selector14", "selector15", "selector16", "selector17", "selector18", "selector19", "selector2", "selector20", "selector3", "selector4", "selector5", "selector6", "selector7", "selector8", "selector9", "server", "ses", "sfmc48", "sharedpool", "sitemail", "sl", "sl1", "sl10", "sl11", "sl12", "sl13", "sl14", "sl15", "sl16", "sl17", "sl18", "sl19", "sl2", "sl20", "sl3", "sl4", "sl5", "sl512", "sl6", "sl7", "sl8", "sl9", "sm", "sm1024", "smtp", "smtpapi", "smtpauth", "smtpcomcustomers", "smtpout", "snowcrash", "socketlabs", "sparkpost", "spf", "spop", "spop1024", "spop2048", "spop512", "squaremail", "stigmate", "tayl", "test", "testdk", "testdkim", "testdkim1024", "testdkim2048", "testdkim256", "testdkim384", "testdkim512", "testdkim768", "tilprivate", "to", "turbosmtp", "v1", "v2", "v3", "v4", "v5", "vzrelay", "wesmail", "www", "x", "yandex", "yesmail1", "yesmail10", "yesmail11", "yesmail12", "yesmail13", "yesmail14", "yesmail15", "yesmail16", "yesmail17", "yesmail18", "yesmail19", "yesmail2", "yesmail20", "yesmail3", "yesmail4", "yesmail5", "yesmail6", "yesmail7", "yesmail8", "yesmail9", "yibm", "yousendit", "zendesk1", "zoho"]
let DKIMSelectors = ["20111001","20111002","20111003","20111004","20111005","20111006","20111007","20111008","20111009","20111010","20111011","20111012","20111013","20111014","20111015","20111016","20111017","20111018","20111019","20111020","20111021","20111022","20111023","20111024","20111025","20111026","20111027","20111028","20111029","20111030","20111031","20111101","20111102","20111103","20111104","20111105","20111106","20111107","20111108","20111109","20111110","20111111","20111112","20111113","20111114","20111115","20111116","20111117","20111118","20111119","20111120","20111121","20111122","20111123","20111124","20111125","20111126","20111127","20111128","20111129","20111130","20111201","20111202","20111203","20111204","20111205","20111206","20111207","20111208","20111209","20111210","20111211","20111212","20111213","20111214","20111215","20111216","20111217","20111218","20111219","20111220","20111221","20111222","20111223","20111224","20111225","20111226","20111227","20111228","20111229","20111230","20111231","20120101","20120102","20120103","20120104","20120105","20120106","20120107","20120108","20120109","20120110","20120111","20120112","20120113","20120114","20120115","20120116","20120117","20120118","20120119","20120120","20120121","20120122","20120123","20120124","20120125","20120126","20120127","20120128","20120129","20120130","20120131","20120201","20120202","20120203","20120204","20120205","20120206","20120207","20120208","20120209","20120210","20120211","20120212","20120213","20120214","20120215","20120216","20120217","20120218","20120219","20120220","20120221","20120222","20120223","20120224","20120225","20120226","20120227","20120228","20120229","20120301","20120302","20120303","20120304","20120305","20120306","20120307","20120308","20120309","20120310","20120311","20120312","20120313","20120314","20120315","20120316","20120317","20120318","20120319","20120320","20120321","20120322","20120323","20120324","20120325","20120326","20120327","20120328","20120329","20120330","20120331","20120401","20120402","20120403","20120404","20120405","20120406","20120407","20120408","20120409","20120410","20120411","20120412","20120413","20120414","20120415","20120416","20120417","20120418","20120419","20120420","20120421","20120422","20120423","20120424","20120425","20120426","20120427","20120428","20120429","20120430","20120501","20120502","20120503","20120504","20120505","20120506","20120507","20120508","20120509","20120510","20120511","20120512","20120513","20120514","20120515","20120516","20120517","20120518","20120519","20120520","20120521","20120522","20120523","20120524","20120525","20120526","20120527","20120528","20120529","20120530","20120531","20120601","20120602","20120603","20120604","20120605","20120606","20120607","20120608","20120609","20120610","20120611","20120612","20120613","20120614","20120615","20120616","20120617","20120618","20120619","20120620","20120621","20120622","20120623","20120624","20120625","20120626","20120627","20120628","20120629","20120630","20120701","20120702","20120703","20120704","20120705","20120706","20120707","20120708","20120709","20120710","20120711","20120712","20120713","20120714","20120715","20120716","20120717","20120718","20120719","20120720","20120721","20120722","20120723","20120724","20120725","20120726","20120727","20120728","20120729","20120730","20120731","20120801","20120802","20120803","20120804","20120805","20120806","20120807","20120808","20120809","20120810","20120811","20120812","20120813","20120814","20120815","20120816","20120817","20120818","20120819","20120820","20120821","20120822","20120823","20120824","20120825","20120826","20120827","20120828","20120829","20120830","20120831","20120901","20120902","20120903","20120904","20120905","20120906","20120907","20120908","20120909","20120910","20120911","20120912","20120913","20120914","20120915","20120916","20120917","20120918","20120919","20120920","20120921","20120922","20120923","20120924","20120925","20120926","20120927","20120928","20120929","20120930","20121001","20121002","20121003","20121004","20121005","20121006","20121007","20121008","20121009","20121010","20121011","20121012","20121013","20121014","20121015","20121016","20121017","20121018","20121019","20121020","20121021","20121022","20121023","20121024","20121025","20121026","20121027","20121028","20121029","20121030","20121031","20121101","20121102","20121103","20121104","20121105","20121106","20121107","20121108","20121109","20121110","20121111","20121112","20121113","20121114","20121115","20121116","20121117","20121118","20121119","20121120","20121121","20121122","20121123","20121124","20121125","20121126","20121127","20121128","20121129","20121130","20121201","20121202","20121203","20121204","20121205","20121206","20121207","20121208","20121209","20121210","20121211","20121212","20121213","20121214","20121215","20121216","20121217","20121218","20121219","20121220","20121221","20121222","20121223","20121224","20121225","20121226","20121227","20121228","20121229","20121230","20121231","20130101","20130102","20130103","20130104","20130105","20130106","20130107","20130108","20130109","20130110","20130111","20130112","20130113","20130114","20130115","20130116","20130117","20130118","20130119","20130120","20130121","20130122","20130123","20130124","20130125","20130126","20130127","20130128","20130129","20130130","20130131","20130201","20130202","20130203","20130204","20130205","20130206","20130207","20130208","20130209","20130210","20130211","20130212","20130213","20130214","20130215","20130216","20130217","20130218","20130219","20130220","20130221","20130222","20130223","20130224","20130225","20130226","20130227","20130228","20130301","20130302","20130303","20130304","20130305","20130306","20130307","20130308","20130309","20130310","20130311","20130312","20130313","20130314","20130315","20130316","20130317","20130318","20130319","20130320","20130321","20130322","20130323","20130324","20130325","20130326","20130327","20130328","20130329","20130330","20130331","20130401","20130402","20130403","20130404","20130405","20130406","20130407","20130408","20130409","20130410","20130411","20130412","20130413","20130414","20130415","20130416","20130417","20130418","20130419","20130420","20130421","20130422","20130423","20130424","20130425","20130426","20130427","20130428","20130429","20130430","20130501","20130502","20130503","20130504","20130505","20130506","20130507","20130508","20130509","20130510","20130511","20130512","20130513","20130514","20130515","20130516","20130517","20130518","20130519","20130520","20130521","20130522","20130523","20130524","20130525","20130526","20130527","20130528","20130529","20130530","20130531","20130601","20130602","20130603","20130604","20130605","20130606","20130607","20130608","20130609","20130610","20130611","20130612","20130613","20130614","20130615","20130616","20130617","20130618","20130619","20130620","20130621","20130622","20130623","20130624","20130625","20130626","20130627","20130628","20130629","20130630","20130701","20130702","20130703","20130704","20130705","20130706","20130707","20130708","20130709","20130710","20130711","20130712","20130713","20130714","20130715","20130716","20130717","20130718","20130719","20130720","20130721","20130722","20130723","20130724","20130725","20130726","20130727","20130728","20130729","20130730","20130731","20130801","20130802","20130803","20130804","20130805","20130806","20130807","20130808","20130809","20130810","20130811","20130812","20130813","20130814","20130815","20130816","20130817","20130818","20130819","20130820","20130821","20130822","20130823","20130824","20130825","20130826","20130827","20130828","20130829","20130830","20130831","20130901","20130902","20130903","20130904","20130905","20130906","20130907","20130908","20130909","20130910","20130911","20130912","20130913","20130914","20130915","20130916","20130917","20130918","20130919","20130920","20130921","20130922","20130923","20130924","20130925","20130926","20130927","20130928","20130929","20130930","20131001","20131002","20131003","20131004","20131005","20131006","20131007","20131008","20131009","20131010","20131011","20131012","20131013","20131014","20131015","20131016","20131017","20131018","20131019","20131020","20131021","20131022","20131023","20131024","20131025","20131026","20131027","20131028","20131029","20131030","20131031","20131101","20131102","20131103","20131104","20131105","20131106","20131107","20131108","20131109","20131110","20131111","20131112","20131113","20131114","20131115","20131116","20131117","20131118","20131119","20131120","20131121","20131122","20131123","20131124","20131125","20131126","20131127","20131128","20131129","20131130","20131201","20131202","20131203","20131204","20131205","20131206","20131207","20131208","20131209","20131210","20131211","20131212","20131213","20131214","20131215","20131216","20131217","20131218","20131219","20131220","20131221","20131222","20131223","20131224","20131225","20131226","20131227","20131228","20131229","20131230","20131231","20140101","20140102","20140103","20140104","20140105","20140106","20140107","20140108","20140109","20140110","20140111","20140112","20140113","20140114","20140115","20140116","20140117","20140118","20140119","20140120","20140121","20140122","20140123","20140124","20140125","20140126","20140127","20140128","20140129","20140130","20140131","20140201","20140202","20140203","20140204","20140205","20140206","20140207","20140208","20140209","20140210","20140211","20140212","20140213","20140214","20140215","20140216","20140217","20140218","20140219","20140220","20140221","20140222","20140223","20140224","20140225","20140226","20140227","20140228","20140301","20140302","20140303","20140304","20140305","20140306","20140307","20140308","20140309","20140310","20140311","20140312","20140313","20140314","20140315","20140316","20140317","20140318","20140319","20140320","20140321","20140322","20140323","20140324","20140325","20140326","20140327","20140328","20140329","20140330","20140331","20140401","20140402","20140403","20140404","20140405","20140406","20140407","20140408","20140409","20140410","20140411","20140412","20140413","20140414","20140415","20140416","20140417","20140418","20140419","20140420","20140421","20140422","20140423","20140424","20140425","20140426","20140427","20140428","20140429","20140430","20140501","20140502","20140503","20140504","20140505","20140506","20140507","20140508","20140509","20140510","20140511","20140512","20140513","20140514","20140515","20140516","20140517","20140518","20140519","20140520","20140521","20140522","20140523","20140524","20140525","20140526","20140527","20140528","20140529","20140530","20140531","20140601","20140602","20140603","20140604","20140605","20140606","20140607","20140608","20140609","20140610","20140611","20140612","20140613","20140614","20140615","20140616","20140617","20140618","20140619","20140620","20140621","20140622","20140623","20140624","20140625","20140626","20140627","20140628","20140629","20140630","20140701","20140702","20140703","20140704","20140705","20140706","20140707","20140708","20140709","20140710","20140711","20140712","20140713","20140714","20140715","20140716","20140717","20140718","20140719","20140720","20140721","20140722","20140723","20140724","20140725","20140726","20140727","20140728","20140729","20140730","20140731","20140801","20140802","20140803","20140804","20140805","20140806","20140807","20140808","20140809","20140810","20140811","20140812","20140813","20140814","20140815","20140816","20140817","20140818","20140819","20140820","20140821","20140822","20140823","20140824","20140825","20140826","20140827","20140828","20140829","20140830","20140831","20140901","20140902","20140903","20140904","20140905","20140906","20140907","20140908","20140909","20140910","20140911","20140912","20140913","20140914","20140915","20140916","20140917","20140918","20140919","20140920","20140921","20140922","20140923","20140924","20140925","20140926","20140927","20140928","20140929","20140930","20141001","20141002","20141003","20141004","20141005","20141006","20141007","20141008","20141009","20141010","20141011","20141012","20141013","20141014","20141015","20141016","20141017","20141018","20141019","20141020","20141021","20141022","20141023","20141024","20141025","20141026","20141027","20141028","20141029","20141030","20141031","20141101","20141102","20141103","20141104","20141105","20141106","20141107","20141108","20141109","20141110","20141111","20141112","20141113","20141114","20141115","20141116","20141117","20141118","20141119","20141120","20141121","20141122","20141123","20141124","20141125","20141126","20141127","20141128","20141129","20141130","20141201","20141202","20141203","20141204","20141205","20141206","20141207","20141208","20141209","20141210","20141211","20141212","20141213","20141214","20141215","20141216","20141217","20141218","20141219","20141220","20141221","20141222","20141223","20141224","20141225","20141226","20141227","20141228","20141229","20141230","20141231","20150101","20150102","20150103","20150104","20150105","20150106","20150107","20150108","20150109","20150110","20150111","20150112","20150113","20150114","20150115","20150116","20150117","20150118","20150119","20150120","20150121","20150122","20150123","20150124","20150125","20150126","20150127","20150128","20150129","20150130","20150131","20150201","20150202","20150203","20150204","20150205","20150206","20150207","20150208","20150209","20150210","20150211","20150212","20150213","20150214","20150215","20150216","20150217","20150218","20150219","20150220","20150221","20150222","20150223","20150224","20150225","20150226","20150227","20150228","20150301","20150302","20150303","20150304","20150305","20150306","20150307","20150308","20150309","20150310","20150311","20150312","20150313","20150314","20150315","20150316","20150317","20150318","20150319","20150320","20150321","20150322","20150323","20150324","20150325","20150326","20150327","20150328","20150329","20150330","20150331","20150401","20150402","20150403","20150404","20150405","20150406","20150407","20150408","20150409","20150410","20150411","20150412","20150413","20150414","20150415","20150416","20150417","20150418","20150419","20150420","20150421","20150422","20150423","20150424","20150425","20150426","20150427","20150428","20150429","20150430","20150501","20150502","20150503","20150504","20150505","20150506","20150507","20150508","20150509","20150510","20150511","20150512","20150513","20150514","20150515","20150516","20150517","20150518","20150519","20150520","20150521","20150522","20150523","20150524","20150525","20150526","20150527","20150528","20150529","20150530","20150531","20150601","20150602","20150603","20150604","20150605","20150606","20150607","20150608","20150609","20150610","20150611","20150612","20150613","20150614","20150615","20150616","20150617","20150618","20150619","20150620","20150621","20150622","20150623","20150624","20150625","20150626","20150627","20150628","20150629","20150630","20150701","20150702","20150703","20150704","20150705","20150706","20150707","20150708","20150709","20150710","20150711","20150712","20150713","20150714","20150715","20150716","20150717","20150718","20150719","20150720","20150721","20150722","20150723","20150724","20150725","20150726","20150727","20150728","20150729","20150730","20150731","20150801","20150802","20150803","20150804","20150805","20150806","20150807","20150808","20150809","20150810","20150811","20150812","20150813","20150814","20150815","20150816","20150817","20150818","20150819","20150820","20150821","20150822","20150823","20150824","20150825","20150826","20150827","20150828","20150829","20150830","20150831","20150901","20150902","20150903","20150904","20150905","20150906","20150907","20150908","20150909","20150910","20150911","20150912","20150913","20150914","20150915","20150916","20150917","20150918","20150919","20150920","20150921","20150922","20150923","20150924","20150925","20150926","20150927","20150928","20150929","20150930","20151001","20151002","20151003","20151004","20151005","20151006","20151007","20151008","20151009","20151010","20151011","20151012","20151013","20151014","20151015","20151016","20151017","20151018","20151019","20151020","20151021","20151022","20151023","20151024","20151025","20151026","20151027","20151028","20151029","20151030","20151031","20151101","20151102","20151103","20151104","20151105","20151106","20151107","20151108","20151109","20151110","20151111","20151112","20151113","20151114","20151115","20151116","20151117","20151118","20151119","20151120","20151121","20151122","20151123","20151124","20151125","20151126","20151127","20151128","20151129","20151130","20151201","20151202","20151203","20151204","20151205","20151206","20151207","20151208","20151209","20151210","20151211","20151212","20151213","20151214","20151215","20151216","20151217","20151218","20151219","20151220","20151221","20151222","20151223","20151224","20151225","20151226","20151227","20151228","20151229","20151230","20151231","20160101","20160102","20160103","20160104","20160105","20160106","20160107","20160108","20160109","20160110","20160111","20160112","20160113","20160114","20160115","20160116","20160117","20160118","20160119","20160120","20160121","20160122","20160123","20160124","20160125","20160126","20160127","20160128","20160129","20160130","20160131","20160201","20160202","20160203","20160204","20160205","20160206","20160207","20160208","20160209","20160210","20160211","20160212","20160213","20160214","20160215","20160216","20160217","20160218","20160219","20160220","20160221","20160222","20160223","20160224","20160225","20160226","20160227","20160228","20160229","20160301","20160302","20160303","20160304","20160305","20160306","20160307","20160308","20160309","20160310","20160311","20160312","20160313","20160314","20160315","20160316","20160317","20160318","20160319","20160320","20160321","20160322","20160323","20160324","20160325","20160326","20160327","20160328","20160329","20160330","20160331","20160401","20160402","20160403","20160404","20160405","20160406","20160407","20160408","20160409","20160410","20160411","20160412","20160413","20160414","20160415","20160416","20160417","20160418","20160419","20160420","20160421","20160422","20160423","20160424","20160425","20160426","20160427","20160428","20160429","20160430","20160501","20160502","20160503","20160504","20160505","20160506","20160507","20160508","20160509","20160510","20160511","20160512","20160513","20160514","20160515","20160516","20160517","20160518","20160519","20160520","20160521","20160522","20160523","20160524","20160525","20160526","20160527","20160528","20160529","20160530","20160531","20160601","20160602","20160603","20160604","20160605","20160606","20160607","20160608","20160609","20160610","20160611","20160612","20160613","20160614","20160615","20160616","20160617","20160618","20160619","20160620","20160621","20160622","20160623","20160624","20160625","20160626","20160627","20160628","20160629","20160630","20160701","20160702","20160703","20160704","20160705","20160706","20160707","20160708","20160709","20160710","20160711","20160712","20160713","20160714","20160715","20160716","20160717","20160718","20160719","20160720","20160721","20160722","20160723","20160724","20160725","20160726","20160727","20160728","20160729","20160730","20160731","20160801","20160802","20160803","20160804","20160805","20160806","20160807","20160808","20160809","20160810","20160811","20160812","20160813","20160814","20160815","20160816","20160817","20160818","20160819","20160820","20160821","20160822","20160823","20160824","20160825","20160826","20160827","20160828","20160829","20160830","20160831","20160901","20160902","20160903","20160904","20160905","20160906","20160907","20160908","20160909","20160910","20160911","20160912","20160913","20160914","20160915","20160916","20160917","20160918","20160919","20160920","20160921","20160922","20160923","20160924","20160925","20160926","20160927","20160928","20160929","20160930","20161001","20161002","20161003","20161004","20161005","20161006","20161007","20161008","20161009","20161010","20161011","20161012","20161013","20161014","20161015","20161016","20161017","20161018","20161019","20161020","20161021","20161022","20161023","20161024","20161025","20161026","20161027","20161028","20161029","20161030","20161031","20161101","20161102","20161103","20161104","20161105","20161106","20161107","20161108","20161109","20161110","20161111","20161112","20161113","20161114","20161115","20161116","20161117","20161118","20161119","20161120","20161121","20161122","20161123","20161124","20161125","20161126","20161127","20161128","20161129","20161130","20161201","20161202","20161203","20161204","20161205","20161206","20161207","20161208","20161209","20161210","20161211","20161212","20161213","20161214","20161215","20161216","20161217","20161218","20161219","20161220","20161221","20161222","20161223","20161224","20161225","20161226","20161227","20161228","20161229","20161230","20161231","20170101","20170102","20170103","20170104","20170105","20170106","20170107","20170108","20170109","20170110","20170111","20170112","20170113","20170114","20170115","20170116","20170117","20170118","20170119","20170120","20170121","20170122","20170123","20170124","20170125","20170126","20170127","20170128","20170129","20170130","20170131","20170201","20170202","20170203","20170204","20170205","20170206","20170207","20170208","20170209","20170210","20170211","20170212","20170213","20170214","20170215","20170216","20170217","20170218","20170219","20170220","20170221","20170222","20170223","20170224","20170225","20170226","20170227","20170228","20170301","20170302","20170303","20170304","20170305","20170306","20170307","20170308","20170309","20170310","20170311","20170312","20170313","20170314","20170315","20170316","20170317","20170318","20170319","20170320","20170321","20170322","20170323","20170324","20170325","20170326","20170327","20170328","20170329","20170330","20170331","20170401","20170402","20170403","20170404","20170405","20170406","20170407","20170408","20170409","20170410","20170411","20170412","20170413","20170414","20170415","20170416","20170417","20170418","20170419","20170420","20170421","20170422","20170423","20170424","20170425","20170426","20170427","20170428","20170429","20170430","20170501","20170502","20170503","20170504","20170505","20170506","20170507","20170508","20170509","20170510","20170511","20170512","20170513","20170514","20170515","20170516","20170517","20170518","20170519","20170520","20170521","20170522","20170523","20170524","20170525","20170526","20170527","20170528","20170529","20170530","20170531","20170601","20170602","20170603","20170604","20170605","20170606","20170607","20170608","20170609","20170610","20170611","20170612","20170613","20170614","20170615","20170616","20170617","20170618","20170619","20170620","20170621","20170622","20170623","20170624","20170625","20170626","20170627","20170628","20170629","20170630","20170701","20170702","20170703","20170704","20170705","20170706","20170707","20170708","20170709","20170710","20170711","20170712","20170713","20170714","20170715","20170716","20170717","20170718","20170719","20170720","20170721","20170722","20170723","20170724","20170725","20170726","20170727","20170728","20170729","20170730","20170731","20170801","20170802","20170803","20170804","20170805","20170806","20170807","20170808","20170809","20170810","20170811","20170812","20170813","20170814","20170815","20170816","20170817","20170818","20170819","20170820","20170821","20170822","20170823","20170824","20170825","20170826","20170827","20170828","20170829","20170830","20170831","20170901","20170902","20170903","20170904","20170905","20170906","20170907","20170908","20170909","20170910","20170911","20170912","20170913","20170914","20170915","20170916","20170917","20170918","20170919","20170920","20170921","20170922","20170923","20170924","20170925","20170926","20170927","20170928","20170929","20170930","20171001","20171002","20171003","20171004","20171005","20171006","20171007","20171008","20171009","20171010","20171011","20171012","20171013","20171014","20171015","20171016","20171017","20171018","20171019","20171020","20171021","20171022","20171023","20171024","20171025","20171026","20171027","20171028","20171029","20171030","20171031","20171101","20171102","20171103","20171104","20171105","20171106","20171107","20171108","20171109","20171110","20171111","20171112","20171113","20171114","20171115","20171116","20171117","20171118","20171119","20171120","20171121","20171122","20171123","20171124","20171125","20171126","20171127","20171128","20171129","20171130","20171201","20171202","20171203","20171204","20171205","20171206","20171207","20171208","20171209","20171210","20171211","20171212","20171213","20171214","20171215","20171216","20171217","20171218","20171219","20171220","20171221","20171222","20171223","20171224","20171225","20171226","20171227","20171228","20171229","20171230","20171231","20180101","20180102","20180103","20180104","20180105","20180106","20180107","20180108","20180109","20180110","20180111","20180112","20180113","20180114","20180115","20180116","20180117","20180118","20180119","20180120","20180121","20180122","20180123","20180124","20180125","20180126","20180127","20180128","20180129","20180130","20180131","20180201","20180202","20180203","20180204","20180205","20180206","20180207","20180208","20180209","20180210","20180211","20180212","20180213","20180214","20180215","20180216","20180217","20180218","20180219","20180220","20180221","20180222","20180223","20180224","20180225","20180226","20180227","20180228","20180301","20180302","20180303","20180304","20180305","20180306","20180307","20180308","20180309","20180310","20180311","20180312","20180313","20180314","20180315","20180316","20180317","20180318","20180319","20180320","20180321","20180322","20180323","20180324","20180325","20180326","20180327","20180328","20180329","20180330","20180331","20180401","20180402","20180403","20180404","20180405","20180406","20180407","20180408","20180409","20180410","20180411","20180412","20180413","20180414","20180415","20180416","20180417","20180418","20180419","20180420","20180421","20180422","20180423","20180424","20180425","20180426","20180427","20180428","20180429","20180430","20180501","20180502","20180503","20180504","20180505","20180506","20180507","20180508","20180509","20180510","20180511","20180512","20180513","20180514","20180515","20180516","20180517","20180518","20180519","20180520","20180521","20180522","20180523","20180524","20180525","20180526","20180527","20180528","20180529","20180530","20180531","20180601","20180602","20180603","20180604","20180605","20180606","20180607","20180608","20180609","20180610","20180611","20180612","20180613","20180614","20180615","20180616","20180617","20180618","20180619","20180620","20180621","20180622","20180623","20180624","20180625","20180626","20180627","20180628","20180629","20180630","20180701","20180702","20180703","20180704","20180705","20180706","20180707","20180708","20180709","20180710","20180711","20180712","20180713","20180714","20180715","20180716","20180717","20180718","20180719","20180720","20180721","20180722","20180723","20180724","20180725","20180726","20180727","20180728","20180729","20180730","20180731","20180801","20180802","20180803","20180804","20180805","20180806","20180807","20180808","20180809","20180810","20180811","20180812","20180813","20180814","20180815","20180816","20180817","20180818","20180819","20180820","20180821","20180822","20180823","20180824","20180825","20180826","20180827","20180828","20180829","20180830","20180831","20180901","20180902","20180903","20180904","20180905","20180906","20180907","20180908","20180909","20180910","20180911","20180912","20180913","20180914","20180915","20180916","20180917","20180918","20180919","20180920","20180921","20180922","20180923","20180924","20180925","20180926","20180927","20180928","20180929","20180930","20181001","20181002","20181003","20181004","20181005","20181006","20181007","20181008","20181009","20181010","20181011","20181012","20181013","20181014","20181015","20181016","20181017","20181018","20181019","20181020","20181021","20181022","20181023","20181024","20181025","20181026","20181027","20181028","20181029","20181030","20181031","20181101","20181102","20181103","20181104","20181105","20181106","20181107","20181108","20181109","20181110","20181111","20181112","20181113","20181114","20181115","20181116","20181117","20181118","20181119","20181120","20181121","20181122","20181123","20181124","20181125","20181126","20181127","20181128","20181129","20181130","20181201","20181202","20181203","20181204","20181205","20181206","20181207","20181208","20181209","20181210","20181211","20181212","20181213","20181214","20181215","20181216","20181217","20181218","20181219","20181220","20181221","20181222","20181223","20181224","20181225","20181226","20181227","20181228","20181229","20181230","20181231","20190101","20190102","20190103","20190104","20190105","20190106","20190107","20190108","20190109","20190110","20190111","20190112","20190113","20190114","20190115","20190116","20190117","20190118","20190119","20190120","20190121","20190122","20190123","20190124","20190125","20190126","20190127","20190128","20190129","20190130","20190131","20190201","20190202","20190203","20190204","20190205","20190206","20190207","20190208","20190209","20190210","20190211","20190212","20190213","20190214","20190215","20190216","20190217","20190218","20190219","20190220","20190221","20190222","20190223","20190224","20190225","20190226","20190227","20190228","20190301","20190302","20190303","20190304","20190305","20190306","20190307","20190308","20190309","20190310","20190311","20190312","20190313","20190314","20190315","20190316","20190317","20190318","20190319","20190320","20190321","20190322","20190323","20190324","20190325","20190326","20190327","20190328","20190329","20190330","20190331","20190401","20190402","20190403","20190404","20190405","20190406","20190407","20190408","20190409","20190410","20190411","20190412","20190413","20190414","20190415","20190416","20190417","20190418","20190419","20190420","20190421","20190422","20190423","20190424","20190425","20190426","20190427","20190428","20190429","20190430","20190501","20190502","20190503","20190504","20190505","20190506","20190507","20190508","20190509","20190510","20190511","20190512","20190513","20190514","20190515","20190516","20190517","20190518","20190519","20190520","20190521","20190522","20190523","20190524","20190525","20190526","20190527","20190528","20190529","20190530","20190531","20190601","20190602","20190603","20190604","20190605","20190606","20190607","20190608","20190609","20190610","20190611","20190612","20190613","20190614","20190615","20190616","20190617","20190618","20190619","20190620","20190621","20190622","20190623","20190624","20190625","20190626","20190627","20190628","20190629","20190630","20190701","20190702","20190703","20190704","20190705","20190706","20190707","20190708","20190709","20190710","20190711","20190712","20190713","20190714","20190715","20190716","20190717","20190718","20190719","20190720","20190721","20190722","20190723","20190724","20190725","20190726","20190727","20190728","20190729","20190730","20190731","20190801","20190802","20190803","20190804","20190805","20190806","20190807","20190808","20190809","20190810","20190811","20190812","20190813","20190814","20190815","20190816","20190817","20190818","20190819","20190820","20190821","20190822","20190823","20190824","20190825","20190826","20190827","20190828","20190829","20190830","20190831","20190901","20190902","20190903","20190904","20190905","20190906","20190907","20190908","20190909","20190910","20190911","20190912","20190913","20190914","20190915","20190916","20190917","20190918","20190919","20190920","20190921","20190922","20190923","20190924","20190925","20190926","20190927","20190928","20190929","20190930","20191001","20191002","20191003","20191004","20191005","20191006","20191007","20191008","20191009","20191010","20191011","20191012","20191013","20191014","20191015","20191016","20191017","20191018","20191019","20191020","20191021","20191022","20191023","20191024","20191025","20191026","20191027","20191028","20191029","20191030","20191031","20191101","20191102","20191103","20191104","20191105","20191106","20191107","20191108","20191109","20191110","20191111","20191112","20191113","20191114","20191115","20191116","20191117","20191118","20191119","20191120","20191121","20191122","20191123","20191124","20191125","20191126","20191127","20191128","20191129","20191130","20191201","20191202","20191203","20191204","20191205","20191206","20191207","20191208","20191209","20191210","20191211","20191212","20191213","20191214","20191215","20191216","20191217","20191218","20191219","20191220","20191221","20191222","20191223","20191224","20191225","20191226","20191227","20191228","20191229","20191230","20191231","20200101","20200102","20200103","20200104","20200105","20200106","20200107","20200108","20200109","20200110","20200111","20200112","20200113","20200114","20200115","20200116","20200117","20200118","20200119","20200120","20200121","20200122","20200123","20200124","20200125","20200126","20200127","20200128","20200129","20200130","20200131","20200201","20200202","20200203","20200204","20200205","20200206","20200207","20200208","20200209","20200210","20200211","20200212","20200213","20200214","20200215","20200216","20200217","20200218","20200219","20200220","20200221","20200222","20200223","20200224","20200225","20200226","20200227","20200228","20200229","20200301","20200302","20200303","20200304","20200305","20200306","20200307","20200308","20200309","20200310","20200311","20200312","20200313","20200314","20200315","20200316","20200317","20200318","20200319","20200320","20200321","20200322","20200323","20200324","20200325","20200326","20200327","20200328","20200329","20200330","20200331","20200401","20200402","20200403","20200404","20200405","20200406","20200407","20200408","20200409","20200410","20200411","20200412","20200413","20200414","20200415","20200416","20200417","20200418","20200419","20200420","20200421","20200422","20200423","20200424","20200425","20200426","20200427","20200428","20200429","20200430","20200501","20200502","20200503","20200504","20200505","20200506","20200507","20200508","20200509","20200510","20200511","20200512","20200513","20200514","20200515","20200516","20200517","20200518","20200519","20200520","20200521","20200522","20200523","20200524","20200525","20200526","20200527","20200528","20200529","20200530","20200531","20200601","20200602","20200603","20200604","20200605","20200606","20200607","20200608","20200609","20200610","20200611","20200612","20200613","20200614","20200615","20200616","20200617","20200618","20200619","20200620","20200621","20200622","20200623","20200624","20200625","20200626","20200627","20200628","20200629","20200630","20200701","20200702","20200703","20200704","20200705","20200706","20200707","20200708","20200709","20200710","20200711","20200712","20200713","20200714","20200715","20200716","20200717","20200718","20200719","20200720","20200721","20200722","20200723","20200724","20200725","20200726","20200727","20200728","20200729","20200730","20200731","20200801","20200802","20200803","20200804","20200805","20200806","20200807","20200808","20200809","20200810","20200811","20200812","20200813","20200814","20200815","20200816","20200817","20200818","20200819","20200820","20200821","20200822","20200823","20200824","20200825","20200826","20200827","20200828","20200829","20200830","20200831","20200901","20200902","20200903","20200904","20200905","20200906","20200907","20200908","20200909","20200910","20200911","20200912","20200913","20200914","20200915","20200916","20200917","20200918","20200919","20200920","20200921","20200922","20200923","20200924","20200925","20200926","20200927","20200928","20200929","20200930","20201001","20201002","20201003","20201004","20201005","20201006","20201007","20201008","20201009","20201010","20201011","20201012","20201013","20201014","20201015","20201016","20201017","20201018","20201019","20201020","20201021","20201022","20201023","20201024","20201025","20201026","20201027","20201028","20201029","20201030","20201031","20201101","20201102","20201103","20201104","20201105","20201106","20201107","20201108","20201109","20201110","20201111","20201112","20201113","20201114","20201115","20201116","20201117","20201118","20201119","20201120","20201121","20201122","20201123","20201124","20201125","20201126","20201127","20201128","20201129","20201130","20201201","20201202","20201203","20201204","20201205","20201206","20201207","20201208","20201209","20201210","20201211","20201212","20201213","20201214","20201215","20201216","20201217","20201218","20201219","20201220","20201221","20201222","20201223","20201224","20201225","20201226","20201227","20201228","20201229","20201230","20201231","20210101","20210102","20210103","20210104","20210105","20210106","20210107","20210108","20210109","20210110","20210111","20210112","20210113","20210114","20210115","20210116","20210117","20210118","20210119","20210120","20210121","20210122","20210123","20210124","20210125","20210126","20210127","20210128","20210129","20210130","20210131","20210201","20210202","20210203","20210204","20210205","20210206","20210207","20210208","20210209","20210210","20210211","20210212","20210213","20210214","20210215","20210216","20210217","20210218","20210219","20210220","20210221","20210222","20210223","20210224","20210225","20210226","20210227","20210228","20210301","20210302","20210303","20210304","20210305","20210306","20210307","20210308","20210309","20210310","20210311","20210312","20210313","20210314","20210315","20210316","20210317","20210318","20210319","20210320","20210321","20210322","20210323","20210324","20210325","20210326","20210327","20210328","20210329","20210330","20210331","20210401","20210402","20210403","20210404","20210405","20210406","20210407","20210408","20210409","20210410","20210411","20210412","20210413","20210414","20210415","20210416","20210417","20210418","20210419","20210420","20210421","20210422","20210423","20210424","20210425","20210426","20210427","20210428","20210429","20210430","20210501","20210502","20210503","20210504","20210505","20210506","20210507","20210508","20210509","20210510","20210511","20210512","20210513","20210514","20210515","20210516","20210517","20210518","20210519","20210520","20210521","20210522","20210523","20210524","20210525","20210526","20210527","20210528","20210529","20210530","20210531","20210601","20210602","20210603","20210604","20210605","20210606","20210607","20210608","20210609","20210610","20210611","20210612","20210613","20210614","20210615","20210616","20210617","20210618","20210619","20210620","20210621","20210622","20210623","20210624","20210625","20210626","20210627","20210628","20210629","20210630","20210701","20210702","20210703","20210704","20210705","20210706","20210707","20210708","20210709","20210710","20210711","20210712","20210713","20210714","20210715","20210716","20210717","20210718","20210719","20210720","20210721","20210722","20210723","20210724","20210725","20210726","20210727","20210728","20210729","20210730","20210731","20210801","20210802","20210803","20210804","20210805","20210806","20210807","20210808","20210809","20210810","20210811","20210812","20210813","20210814","20210815","20210816","20210817","20210818","20210819","20210820","20210821","20210822","20210823","20210824","20210825","20210826","20210827","20210828","20210829","20210830","20210831","20210901","20210902","20210903","20210904","20210905","20210906","20210907","20210908","20210909","20210910","20210911","20210912","20210913","20210914","20210915","20210916","20210917","20210918","20210919","20210920","20210921","20210922","20210923","20210924","20210925","20210926","20210927","20210928","20210929","20210930","20211001","20211002","20211003","20211004","20211005","20211006","20211007","20211008","20211009","20211010","20211011","20211012","20211013","20211014","20211015","20211016","20211017","20211018","20211019","20211020","20211021","20211022","20211023","20211024","20211025","20211026","20211027","20211028","20211029","20211030","20211031","20211101","20211102","20211103","20211104","20211105","20211106","20211107","20211108","20211109","20211110","20211111","20211112","20211113","20211114","20211115","20211116","20211117","20211118","20211119","20211120","20211121","20211122","20211123","20211124","20211125","20211126","20211127","20211128","20211129","20211130","20211201","20211202","20211203","20211204","20211205","20211206","20211207","20211208","20211209","20211210","20211211","20211212","20211213","20211214","20211215","20211216","20211217","20211218","20211219","20211220","20211221","20211222","20211223","20211224","20211225","20211226","20211227","20211228","20211229","20211230","20211231","20220101","20220102","20220103","20220104","20220105","20220106","20220107","20220108","20220109","20220110","20220111","20220112","20220113","20220114","20220115","20220116","20220117","20220118","20220119","20220120","20220121","20220122","20220123","20220124","20220125","20220126","20220127","20220128","20220129","20220130","20220131","20220201","20220202","20220203","20220204","20220205","20220206","20220207","20220208","20220209","20220210","20220211","20220212","20220213","20220214","20220215","20220216","20220217","20220218","20220219","20220220","20220221","20220222","20220223","20220224","20220225","20220226","20220227","20220228","20220301","20220302","20220303","20220304","20220305","20220306","20220307","20220308","20220309","20220310","20220311","20220312","20220313","20220314","20220315","20220316","20220317","20220318","20220319","20220320","20220321","20220322","20220323","20220324","20220325","20220326","20220327","20220328","20220329","20220330","20220331","20220401","20220402","20220403","20220404","20220405","20220406","20220407","20220408","20220409","20220410","20220411","20220412","20220413","20220414","20220415","20220416","20220417","20220418","20220419","20220420","20220421","20220422","20220423","20220424","20220425","20220426","20220427","20220428","20220429","20220430","20220501","20220502","20220503","20220504","20220505","20220506","20220507","20220508","20220509","20220510","20220511","20220512","20220513","20220514","20220515","20220516","20220517","20220518","20220519","20220520","20220521","20220522","20220523","20220524","20220525","20220526","20220527","20220528","20220529","20220530","20220531","20220601","20220602","20220603","20220604","20220605","20220606","20220607","20220608","20220609","20220610","20220611","20220612","20220613","20220614","20220615","20220616","20220617","20220618","20220619","20220620","20220621","20220622","20220623","20220624","20220625","20220626","20220627","20220628","20220629","20220630","20220701","20220702","20220703","20220704","20220705","20220706","20220707","20220708","20220709","20220710","20220711","20220712","20220713","20220714","20220715","20220716","20220717","20220718","20220719","20220720","20220721","20220722","20220723","20220724","20220725","20220726","20220727","20220728","20220729","20220730","20220731","20220801","20220802","20220803","20220804","20220805","20220806","20220807","20220808","20220809","20220810","20220811","20220812","20220813","20220814","20220815","20220816","20220817","20220818","20220819","20220820","20220821","20220822","20220823","20220824","20220825","20220826","20220827","20220828","20220829","20220830","20220831","20220901","20220902","20220903","20220904","20220905","20220906","20220907","20220908","20220909","20220910","20220911","20220912","20220913","20220914","20220915","20220916","20220917","20220918","20220919","20220920","20220921","20220922","20220923","20220924","20220925","20220926","20220927","20220928","20220929","20220930","20221001","20221002","20221003","20221004","20221005","20221006","20221007","20221008","20221009","20221010","20221011","20221012","20221013","20221014","20221015","20221016","20221017","20221018","20221019","20221020","20221021","20221022","20221023","20221024","20221025","20221026","20221027","20221028","20221029","20221030","20221031","20221101","20221102","20221103","20221104","20221105","20221106","20221107","20221108","20221109","20221110","20221111","20221112","20221113","20221114","20221115","20221116","20221117","20221118","20221119","20221120","20221121","20221122","20221123","20221124","20221125","20221126","20221127","20221128","20221129","20221130","20221201","20221202","20221203","20221204","20221205","20221206","20221207","20221208","20221209","20221210","20221211","20221212","20221213","20221214","20221215","20221216","20221217","20221218","20221219","20221220","20221221","20221222","20221223","20221224","20221225","20221226","20221227","20221228","20221229","20221230","20221231","20230101","20230102","20230103","20230104","20230105","20230106","20230107","20230108","20230109","20230110","20230111","20230112","20230113","20230114","20230115","20230116","20230117","20230118","20230119","20230120","20230121","20230122","20230123","20230124","20230125","20230126","20230127","20230128","20230129","20230130","20230131","20230201","20230202","20230203","20230204","20230205","20230206","20230207","20230208","20230209","20230210","20230211","20230212","20230213","20230214","20230215","20230216","20230217","20230218","20230219","20230220","20230221","20230222","20230223","20230224","20230225","20230226","20230227","20230228","20230301","20230302","20230303","20230304","20230305","20230306","20230307","20230308","20230309","20230310","20230311","20230312","20230313","20230314","20230315","20230316","20230317","20230318","20230319","20230320","20230321","20230322","20230323","20230324","20230325","20230326","20230327","20230328","20230329","20230330","20230331","20230401","20230402","20230403","20230404","20230405","20230406","20230407","20230408","20230409","20230410","20230411","20230412","20230413","20230414","20230415","20230416","20230417","20230418","20230419","20230420","20230421","20230422","20230423","20230424","20230425","20230426","20230427","20230428","20230429","20230430","20230501","20230502","20230503","20230504","20230505","20230506","20230507","20230508","20230509","20230510","20230511","20230512","20230513","20230514","20230515","20230516","20230517","20230518","20230519","20230520","20230521","20230522","20230523","20230524","20230525","20230526","20230527","20230528","20230529","20230530","20230531","20230601","20230602","20230603","20230604","20230605","20230606","20230607","20230608","20230609","20230610","20230611","20230612","20230613","20230614","20230615","20230616","20230617","20230618","20230619","20230620","20230621","20230622","20230623","20230624","20230625","20230626","20230627","20230628","20230629","20230630","20230701","20230702","20230703","20230704","20230705","20230706","20230707","20230708","20230709","20230710","20230711","20230712","20230713","20230714","20230715","20230716","20230717","20230718","20230719","20230720","20230721","20230722","20230723","20230724","20230725","20230726","20230727","20230728","20230729","20230730","20230731","20230801","20230802","20230803","20230804","20230805","20230806","20230807","20230808","20230809","20230810","20230811","20230812","20230813","20230814","20230815","20230816","20230817","20230818","20230819","20230820","20230821","20230822","20230823","20230824","20230825","20230826","20230827","20230828","20230829","20230830","20230831","20230901","20230902","20230903","20230904","20230905","20230906","20230907","20230908","20230909","20230910","20230911","20230912","20230913","20230914","20230915","20230916","20230917","20230918","20230919","20230920","20230921","20230922","20230923","20230924","20230925","20230926","20230927","20230928","20230929","20230930","20231001","20231002","20231003","20231004","20231005","20231006","20231007","20231008","20231009","20231010","20231011","20231012","20231013","20231014","20231015","20231016","20231017","20231018","20231019","20231020","20231021","20231022","20231023","20231024","20231025","20231026","20231027","20231028","20231029","20231030","20231031","20231101","20231102","20231103","20231104","20231105","20231106","20231107","20231108","20231109","20231110","20231111","20231112","20231113","20231114","20231115","20231116","20231117","20231118","20231119","20231120","20231121","20231122","20231123","20231124","20231125","20231126","20231127","20231128","20231129","20231130","20231201","20231202","20231203","20231204","20231205","20231206","20231207","20231208","20231209","20231210","20231211","20231212","20231213","20231214","20231215","20231216","20231217","20231218","20231219","20231220","20231221","20231222","20231223","20231224","20231225","20231226","20231227","20231228","20231229","20231230","20231231","20240101"];
let ARCCustomSelectors = ["arc", "arc-384", "arc-512", "arc-768", "arc-1024", "arc-2048", "arc-4096", "arc-seal", "arc-2000", "arc-2001", "arc-2002", "arc-2003", "arc-2004", "arc-2005", "arc-2006", "arc-2007", "arc-2008", "arc-2009", "arc-2010", "arc-2011", "arc-2012", "arc-2013", "arc-2014", "arc-2015", "arc-2016", "arc-2017", "arc-2018", "arc-2019", "arc-2020", "arc-2021", "arc-2022", "arc-2023", "arc-2024", "arc-2025", "zohoarc", "arcs", "arcsel", "arcselector", "arcselector9901", "arc-20160816"];
let ARCSelectors = ["arc-20190101","arc-20190102","arc-20190103","arc-20190104","arc-20190105","arc-20190106","arc-20190107","arc-20190108","arc-20190109","arc-20190110","arc-20190111","arc-20190112","arc-20190113","arc-20190114","arc-20190115","arc-20190116","arc-20190117","arc-20190118","arc-20190119","arc-20190120","arc-20190121","arc-20190122","arc-20190123","arc-20190124","arc-20190125","arc-20190126","arc-20190127","arc-20190128","arc-20190129","arc-20190130","arc-20190131","arc-20190201","arc-20190202","arc-20190203","arc-20190204","arc-20190205","arc-20190206","arc-20190207","arc-20190208","arc-20190209","arc-20190210","arc-20190211","arc-20190212","arc-20190213","arc-20190214","arc-20190215","arc-20190216","arc-20190217","arc-20190218","arc-20190219","arc-20190220","arc-20190221","arc-20190222","arc-20190223","arc-20190224","arc-20190225","arc-20190226","arc-20190227","arc-20190228","arc-20190301","arc-20190302","arc-20190303","arc-20190304","arc-20190305","arc-20190306","arc-20190307","arc-20190308","arc-20190309","arc-20190310","arc-20190311","arc-20190312","arc-20190313","arc-20190314","arc-20190315","arc-20190316","arc-20190317","arc-20190318","arc-20190319","arc-20190320","arc-20190321","arc-20190322","arc-20190323","arc-20190324","arc-20190325","arc-20190326","arc-20190327","arc-20190328","arc-20190329","arc-20190330","arc-20190331","arc-20190401","arc-20190402","arc-20190403","arc-20190404","arc-20190405","arc-20190406","arc-20190407","arc-20190408","arc-20190409","arc-20190410","arc-20190411","arc-20190412","arc-20190413","arc-20190414","arc-20190415","arc-20190416","arc-20190417","arc-20190418","arc-20190419","arc-20190420","arc-20190421","arc-20190422","arc-20190423","arc-20190424","arc-20190425","arc-20190426","arc-20190427","arc-20190428","arc-20190429","arc-20190430","arc-20190501","arc-20190502","arc-20190503","arc-20190504","arc-20190505","arc-20190506","arc-20190507","arc-20190508","arc-20190509","arc-20190510","arc-20190511","arc-20190512","arc-20190513","arc-20190514","arc-20190515","arc-20190516","arc-20190517","arc-20190518","arc-20190519","arc-20190520","arc-20190521","arc-20190522","arc-20190523","arc-20190524","arc-20190525","arc-20190526","arc-20190527","arc-20190528","arc-20190529","arc-20190530","arc-20190531","arc-20190601","arc-20190602","arc-20190603","arc-20190604","arc-20190605","arc-20190606","arc-20190607","arc-20190608","arc-20190609","arc-20190610","arc-20190611","arc-20190612","arc-20190613","arc-20190614","arc-20190615","arc-20190616","arc-20190617","arc-20190618","arc-20190619","arc-20190620","arc-20190621","arc-20190622","arc-20190623","arc-20190624","arc-20190625","arc-20190626","arc-20190627","arc-20190628","arc-20190629","arc-20190630","arc-20190701","arc-20190702","arc-20190703","arc-20190704","arc-20190705","arc-20190706","arc-20190707","arc-20190708","arc-20190709","arc-20190710","arc-20190711","arc-20190712","arc-20190713","arc-20190714","arc-20190715","arc-20190716","arc-20190717","arc-20190718","arc-20190719","arc-20190720","arc-20190721","arc-20190722","arc-20190723","arc-20190724","arc-20190725","arc-20190726","arc-20190727","arc-20190728","arc-20190729","arc-20190730","arc-20190731","arc-20190801","arc-20190802","arc-20190803","arc-20190804","arc-20190805","arc-20190806","arc-20190807","arc-20190808","arc-20190809","arc-20190810","arc-20190811","arc-20190812","arc-20190813","arc-20190814","arc-20190815","arc-20190816","arc-20190817","arc-20190818","arc-20190819","arc-20190820","arc-20190821","arc-20190822","arc-20190823","arc-20190824","arc-20190825","arc-20190826","arc-20190827","arc-20190828","arc-20190829","arc-20190830","arc-20190831","arc-20190901","arc-20190902","arc-20190903","arc-20190904","arc-20190905","arc-20190906","arc-20190907","arc-20190908","arc-20190909","arc-20190910","arc-20190911","arc-20190912","arc-20190913","arc-20190914","arc-20190915","arc-20190916","arc-20190917","arc-20190918","arc-20190919","arc-20190920","arc-20190921","arc-20190922","arc-20190923","arc-20190924","arc-20190925","arc-20190926","arc-20190927","arc-20190928","arc-20190929","arc-20190930","arc-20191001","arc-20191002","arc-20191003","arc-20191004","arc-20191005","arc-20191006","arc-20191007","arc-20191008","arc-20191009","arc-20191010","arc-20191011","arc-20191012","arc-20191013","arc-20191014","arc-20191015","arc-20191016","arc-20191017","arc-20191018","arc-20191019","arc-20191020","arc-20191021","arc-20191022","arc-20191023","arc-20191024","arc-20191025","arc-20191026","arc-20191027","arc-20191028","arc-20191029","arc-20191030","arc-20191031","arc-20191101","arc-20191102","arc-20191103","arc-20191104","arc-20191105","arc-20191106","arc-20191107","arc-20191108","arc-20191109","arc-20191110","arc-20191111","arc-20191112","arc-20191113","arc-20191114","arc-20191115","arc-20191116","arc-20191117","arc-20191118","arc-20191119","arc-20191120","arc-20191121","arc-20191122","arc-20191123","arc-20191124","arc-20191125","arc-20191126","arc-20191127","arc-20191128","arc-20191129","arc-20191130","arc-20191201","arc-20191202","arc-20191203","arc-20191204","arc-20191205","arc-20191206","arc-20191207","arc-20191208","arc-20191209","arc-20191210","arc-20191211","arc-20191212","arc-20191213","arc-20191214","arc-20191215","arc-20191216","arc-20191217","arc-20191218","arc-20191219","arc-20191220","arc-20191221","arc-20191222","arc-20191223","arc-20191224","arc-20191225","arc-20191226","arc-20191227","arc-20191228","arc-20191229","arc-20191230","arc-20191231","arc-20200101","arc-20200102","arc-20200103","arc-20200104","arc-20200105","arc-20200106","arc-20200107","arc-20200108","arc-20200109","arc-20200110","arc-20200111","arc-20200112","arc-20200113","arc-20200114","arc-20200115","arc-20200116","arc-20200117","arc-20200118","arc-20200119","arc-20200120","arc-20200121","arc-20200122","arc-20200123","arc-20200124","arc-20200125","arc-20200126","arc-20200127","arc-20200128","arc-20200129","arc-20200130","arc-20200131","arc-20200201","arc-20200202","arc-20200203","arc-20200204","arc-20200205","arc-20200206","arc-20200207","arc-20200208","arc-20200209","arc-20200210","arc-20200211","arc-20200212","arc-20200213","arc-20200214","arc-20200215","arc-20200216","arc-20200217","arc-20200218","arc-20200219","arc-20200220","arc-20200221","arc-20200222","arc-20200223","arc-20200224","arc-20200225","arc-20200226","arc-20200227","arc-20200228","arc-20200229","arc-20200301","arc-20200302","arc-20200303","arc-20200304","arc-20200305","arc-20200306","arc-20200307","arc-20200308","arc-20200309","arc-20200310","arc-20200311","arc-20200312","arc-20200313","arc-20200314","arc-20200315","arc-20200316","arc-20200317","arc-20200318","arc-20200319","arc-20200320","arc-20200321","arc-20200322","arc-20200323","arc-20200324","arc-20200325","arc-20200326","arc-20200327","arc-20200328","arc-20200329","arc-20200330","arc-20200331","arc-20200401","arc-20200402","arc-20200403","arc-20200404","arc-20200405","arc-20200406","arc-20200407","arc-20200408","arc-20200409","arc-20200410","arc-20200411","arc-20200412","arc-20200413","arc-20200414","arc-20200415","arc-20200416","arc-20200417","arc-20200418","arc-20200419","arc-20200420","arc-20200421","arc-20200422","arc-20200423","arc-20200424","arc-20200425","arc-20200426","arc-20200427","arc-20200428","arc-20200429","arc-20200430","arc-20200501","arc-20200502","arc-20200503","arc-20200504","arc-20200505","arc-20200506","arc-20200507","arc-20200508","arc-20200509","arc-20200510","arc-20200511","arc-20200512","arc-20200513","arc-20200514","arc-20200515","arc-20200516","arc-20200517","arc-20200518","arc-20200519","arc-20200520","arc-20200521","arc-20200522","arc-20200523","arc-20200524","arc-20200525","arc-20200526","arc-20200527","arc-20200528","arc-20200529","arc-20200530","arc-20200531","arc-20200601","arc-20200602","arc-20200603","arc-20200604","arc-20200605","arc-20200606","arc-20200607","arc-20200608","arc-20200609","arc-20200610","arc-20200611","arc-20200612","arc-20200613","arc-20200614","arc-20200615","arc-20200616","arc-20200617","arc-20200618","arc-20200619","arc-20200620","arc-20200621","arc-20200622","arc-20200623","arc-20200624","arc-20200625","arc-20200626","arc-20200627","arc-20200628","arc-20200629","arc-20200630","arc-20200701","arc-20200702","arc-20200703","arc-20200704","arc-20200705","arc-20200706","arc-20200707","arc-20200708","arc-20200709","arc-20200710","arc-20200711","arc-20200712","arc-20200713","arc-20200714","arc-20200715","arc-20200716","arc-20200717","arc-20200718","arc-20200719","arc-20200720","arc-20200721","arc-20200722","arc-20200723","arc-20200724","arc-20200725","arc-20200726","arc-20200727","arc-20200728","arc-20200729","arc-20200730","arc-20200731","arc-20200801","arc-20200802","arc-20200803","arc-20200804","arc-20200805","arc-20200806","arc-20200807","arc-20200808","arc-20200809","arc-20200810","arc-20200811","arc-20200812","arc-20200813","arc-20200814","arc-20200815","arc-20200816","arc-20200817","arc-20200818","arc-20200819","arc-20200820","arc-20200821","arc-20200822","arc-20200823","arc-20200824","arc-20200825","arc-20200826","arc-20200827","arc-20200828","arc-20200829","arc-20200830","arc-20200831","arc-20200901","arc-20200902","arc-20200903","arc-20200904","arc-20200905","arc-20200906","arc-20200907","arc-20200908","arc-20200909","arc-20200910","arc-20200911","arc-20200912","arc-20200913","arc-20200914","arc-20200915","arc-20200916","arc-20200917","arc-20200918","arc-20200919","arc-20200920","arc-20200921","arc-20200922","arc-20200923","arc-20200924","arc-20200925","arc-20200926","arc-20200927","arc-20200928","arc-20200929","arc-20200930","arc-20201001","arc-20201002","arc-20201003","arc-20201004","arc-20201005","arc-20201006","arc-20201007","arc-20201008","arc-20201009","arc-20201010","arc-20201011","arc-20201012","arc-20201013","arc-20201014","arc-20201015","arc-20201016","arc-20201017","arc-20201018","arc-20201019","arc-20201020","arc-20201021","arc-20201022","arc-20201023","arc-20201024","arc-20201025","arc-20201026","arc-20201027","arc-20201028","arc-20201029","arc-20201030","arc-20201031","arc-20201101","arc-20201102","arc-20201103","arc-20201104","arc-20201105","arc-20201106","arc-20201107","arc-20201108","arc-20201109","arc-20201110","arc-20201111","arc-20201112","arc-20201113","arc-20201114","arc-20201115","arc-20201116","arc-20201117","arc-20201118","arc-20201119","arc-20201120","arc-20201121","arc-20201122","arc-20201123","arc-20201124","arc-20201125","arc-20201126","arc-20201127","arc-20201128","arc-20201129","arc-20201130","arc-20201201","arc-20201202","arc-20201203","arc-20201204","arc-20201205","arc-20201206","arc-20201207","arc-20201208","arc-20201209","arc-20201210","arc-20201211","arc-20201212","arc-20201213","arc-20201214","arc-20201215","arc-20201216","arc-20201217","arc-20201218","arc-20201219","arc-20201220","arc-20201221","arc-20201222","arc-20201223","arc-20201224","arc-20201225","arc-20201226","arc-20201227","arc-20201228","arc-20201229","arc-20201230","arc-20201231","arc-20210101","arc-20210102","arc-20210103","arc-20210104","arc-20210105","arc-20210106","arc-20210107","arc-20210108","arc-20210109","arc-20210110","arc-20210111","arc-20210112","arc-20210113","arc-20210114","arc-20210115","arc-20210116","arc-20210117","arc-20210118","arc-20210119","arc-20210120","arc-20210121","arc-20210122","arc-20210123","arc-20210124","arc-20210125","arc-20210126","arc-20210127","arc-20210128","arc-20210129","arc-20210130","arc-20210131","arc-20210201","arc-20210202","arc-20210203","arc-20210204","arc-20210205","arc-20210206","arc-20210207","arc-20210208","arc-20210209","arc-20210210","arc-20210211","arc-20210212","arc-20210213","arc-20210214","arc-20210215","arc-20210216","arc-20210217","arc-20210218","arc-20210219","arc-20210220","arc-20210221","arc-20210222","arc-20210223","arc-20210224","arc-20210225","arc-20210226","arc-20210227","arc-20210228","arc-20210301","arc-20210302","arc-20210303","arc-20210304","arc-20210305","arc-20210306","arc-20210307","arc-20210308","arc-20210309","arc-20210310","arc-20210311","arc-20210312","arc-20210313","arc-20210314","arc-20210315","arc-20210316","arc-20210317","arc-20210318","arc-20210319","arc-20210320","arc-20210321","arc-20210322","arc-20210323","arc-20210324","arc-20210325","arc-20210326","arc-20210327","arc-20210328","arc-20210329","arc-20210330","arc-20210331","arc-20210401","arc-20210402","arc-20210403","arc-20210404","arc-20210405","arc-20210406","arc-20210407","arc-20210408","arc-20210409","arc-20210410","arc-20210411","arc-20210412","arc-20210413","arc-20210414","arc-20210415","arc-20210416","arc-20210417","arc-20210418","arc-20210419","arc-20210420","arc-20210421","arc-20210422","arc-20210423","arc-20210424","arc-20210425","arc-20210426","arc-20210427","arc-20210428","arc-20210429","arc-20210430","arc-20210501","arc-20210502","arc-20210503","arc-20210504","arc-20210505","arc-20210506","arc-20210507","arc-20210508","arc-20210509","arc-20210510","arc-20210511","arc-20210512","arc-20210513","arc-20210514","arc-20210515","arc-20210516","arc-20210517","arc-20210518","arc-20210519","arc-20210520","arc-20210521","arc-20210522","arc-20210523","arc-20210524","arc-20210525","arc-20210526","arc-20210527","arc-20210528","arc-20210529","arc-20210530","arc-20210531","arc-20210601","arc-20210602","arc-20210603","arc-20210604","arc-20210605","arc-20210606","arc-20210607","arc-20210608","arc-20210609","arc-20210610","arc-20210611","arc-20210612","arc-20210613","arc-20210614","arc-20210615","arc-20210616","arc-20210617","arc-20210618","arc-20210619","arc-20210620","arc-20210621","arc-20210622","arc-20210623","arc-20210624","arc-20210625","arc-20210626","arc-20210627","arc-20210628","arc-20210629","arc-20210630","arc-20210701","arc-20210702","arc-20210703","arc-20210704","arc-20210705","arc-20210706","arc-20210707","arc-20210708","arc-20210709","arc-20210710","arc-20210711","arc-20210712","arc-20210713","arc-20210714","arc-20210715","arc-20210716","arc-20210717","arc-20210718","arc-20210719","arc-20210720","arc-20210721","arc-20210722","arc-20210723","arc-20210724","arc-20210725","arc-20210726","arc-20210727","arc-20210728","arc-20210729","arc-20210730","arc-20210731","arc-20210801","arc-20210802","arc-20210803","arc-20210804","arc-20210805","arc-20210806","arc-20210807","arc-20210808","arc-20210809","arc-20210810","arc-20210811","arc-20210812","arc-20210813","arc-20210814","arc-20210815","arc-20210816","arc-20210817","arc-20210818","arc-20210819","arc-20210820","arc-20210821","arc-20210822","arc-20210823","arc-20210824","arc-20210825","arc-20210826","arc-20210827","arc-20210828","arc-20210829","arc-20210830","arc-20210831","arc-20210901","arc-20210902","arc-20210903","arc-20210904","arc-20210905","arc-20210906","arc-20210907","arc-20210908","arc-20210909","arc-20210910","arc-20210911","arc-20210912","arc-20210913","arc-20210914","arc-20210915","arc-20210916","arc-20210917","arc-20210918","arc-20210919","arc-20210920","arc-20210921","arc-20210922","arc-20210923","arc-20210924","arc-20210925","arc-20210926","arc-20210927","arc-20210928","arc-20210929","arc-20210930","arc-20211001","arc-20211002","arc-20211003","arc-20211004","arc-20211005","arc-20211006","arc-20211007","arc-20211008","arc-20211009","arc-20211010","arc-20211011","arc-20211012","arc-20211013","arc-20211014","arc-20211015","arc-20211016","arc-20211017","arc-20211018","arc-20211019","arc-20211020","arc-20211021","arc-20211022","arc-20211023","arc-20211024","arc-20211025","arc-20211026","arc-20211027","arc-20211028","arc-20211029","arc-20211030","arc-20211031","arc-20211101","arc-20211102","arc-20211103","arc-20211104","arc-20211105","arc-20211106","arc-20211107","arc-20211108","arc-20211109","arc-20211110","arc-20211111","arc-20211112","arc-20211113","arc-20211114","arc-20211115","arc-20211116","arc-20211117","arc-20211118","arc-20211119","arc-20211120","arc-20211121","arc-20211122","arc-20211123","arc-20211124","arc-20211125","arc-20211126","arc-20211127","arc-20211128","arc-20211129","arc-20211130","arc-20211201","arc-20211202","arc-20211203","arc-20211204","arc-20211205","arc-20211206","arc-20211207","arc-20211208","arc-20211209","arc-20211210","arc-20211211","arc-20211212","arc-20211213","arc-20211214","arc-20211215","arc-20211216","arc-20211217","arc-20211218","arc-20211219","arc-20211220","arc-20211221","arc-20211222","arc-20211223","arc-20211224","arc-20211225","arc-20211226","arc-20211227","arc-20211228","arc-20211229","arc-20211230","arc-20211231","arc-20220101","arc-20220102","arc-20220103","arc-20220104","arc-20220105","arc-20220106","arc-20220107","arc-20220108","arc-20220109","arc-20220110","arc-20220111","arc-20220112","arc-20220113","arc-20220114","arc-20220115","arc-20220116","arc-20220117","arc-20220118","arc-20220119","arc-20220120","arc-20220121","arc-20220122","arc-20220123","arc-20220124","arc-20220125","arc-20220126","arc-20220127","arc-20220128","arc-20220129","arc-20220130","arc-20220131","arc-20220201","arc-20220202","arc-20220203","arc-20220204","arc-20220205","arc-20220206","arc-20220207","arc-20220208","arc-20220209","arc-20220210","arc-20220211","arc-20220212","arc-20220213","arc-20220214","arc-20220215","arc-20220216","arc-20220217","arc-20220218","arc-20220219","arc-20220220","arc-20220221","arc-20220222","arc-20220223","arc-20220224","arc-20220225","arc-20220226","arc-20220227","arc-20220228","arc-20220301","arc-20220302","arc-20220303","arc-20220304","arc-20220305","arc-20220306","arc-20220307","arc-20220308","arc-20220309","arc-20220310","arc-20220311","arc-20220312","arc-20220313","arc-20220314","arc-20220315","arc-20220316","arc-20220317","arc-20220318","arc-20220319","arc-20220320","arc-20220321","arc-20220322","arc-20220323","arc-20220324","arc-20220325","arc-20220326","arc-20220327","arc-20220328","arc-20220329","arc-20220330","arc-20220331","arc-20220401","arc-20220402","arc-20220403","arc-20220404","arc-20220405","arc-20220406","arc-20220407","arc-20220408","arc-20220409","arc-20220410","arc-20220411","arc-20220412","arc-20220413","arc-20220414","arc-20220415","arc-20220416","arc-20220417","arc-20220418","arc-20220419","arc-20220420","arc-20220421","arc-20220422","arc-20220423","arc-20220424","arc-20220425","arc-20220426","arc-20220427","arc-20220428","arc-20220429","arc-20220430","arc-20220501","arc-20220502","arc-20220503","arc-20220504","arc-20220505","arc-20220506","arc-20220507","arc-20220508","arc-20220509","arc-20220510","arc-20220511","arc-20220512","arc-20220513","arc-20220514","arc-20220515","arc-20220516","arc-20220517","arc-20220518","arc-20220519","arc-20220520","arc-20220521","arc-20220522","arc-20220523","arc-20220524","arc-20220525","arc-20220526","arc-20220527","arc-20220528","arc-20220529","arc-20220530","arc-20220531","arc-20220601","arc-20220602","arc-20220603","arc-20220604","arc-20220605","arc-20220606","arc-20220607","arc-20220608","arc-20220609","arc-20220610","arc-20220611","arc-20220612","arc-20220613","arc-20220614","arc-20220615","arc-20220616","arc-20220617","arc-20220618","arc-20220619","arc-20220620","arc-20220621","arc-20220622","arc-20220623","arc-20220624","arc-20220625","arc-20220626","arc-20220627","arc-20220628","arc-20220629","arc-20220630","arc-20220701","arc-20220702","arc-20220703","arc-20220704","arc-20220705","arc-20220706","arc-20220707","arc-20220708","arc-20220709","arc-20220710","arc-20220711","arc-20220712","arc-20220713","arc-20220714","arc-20220715","arc-20220716","arc-20220717","arc-20220718","arc-20220719","arc-20220720","arc-20220721","arc-20220722","arc-20220723","arc-20220724","arc-20220725","arc-20220726","arc-20220727","arc-20220728","arc-20220729","arc-20220730","arc-20220731","arc-20220801","arc-20220802","arc-20220803","arc-20220804","arc-20220805","arc-20220806","arc-20220807","arc-20220808","arc-20220809","arc-20220810","arc-20220811","arc-20220812","arc-20220813","arc-20220814","arc-20220815","arc-20220816","arc-20220817","arc-20220818","arc-20220819","arc-20220820","arc-20220821","arc-20220822","arc-20220823","arc-20220824","arc-20220825","arc-20220826","arc-20220827","arc-20220828","arc-20220829","arc-20220830","arc-20220831","arc-20220901","arc-20220902","arc-20220903","arc-20220904","arc-20220905","arc-20220906","arc-20220907","arc-20220908","arc-20220909","arc-20220910","arc-20220911","arc-20220912","arc-20220913","arc-20220914","arc-20220915","arc-20220916","arc-20220917","arc-20220918","arc-20220919","arc-20220920","arc-20220921","arc-20220922","arc-20220923","arc-20220924","arc-20220925","arc-20220926","arc-20220927","arc-20220928","arc-20220929","arc-20220930","arc-20221001","arc-20221002","arc-20221003","arc-20221004","arc-20221005","arc-20221006","arc-20221007","arc-20221008","arc-20221009","arc-20221010","arc-20221011","arc-20221012","arc-20221013","arc-20221014","arc-20221015","arc-20221016","arc-20221017","arc-20221018","arc-20221019","arc-20221020","arc-20221021","arc-20221022","arc-20221023","arc-20221024","arc-20221025","arc-20221026","arc-20221027","arc-20221028","arc-20221029","arc-20221030","arc-20221031","arc-20221101","arc-20221102","arc-20221103","arc-20221104","arc-20221105","arc-20221106","arc-20221107","arc-20221108","arc-20221109","arc-20221110","arc-20221111","arc-20221112","arc-20221113","arc-20221114","arc-20221115","arc-20221116","arc-20221117","arc-20221118","arc-20221119","arc-20221120","arc-20221121","arc-20221122","arc-20221123","arc-20221124","arc-20221125","arc-20221126","arc-20221127","arc-20221128","arc-20221129","arc-20221130","arc-20221201","arc-20221202","arc-20221203","arc-20221204","arc-20221205","arc-20221206","arc-20221207","arc-20221208","arc-20221209","arc-20221210","arc-20221211","arc-20221212","arc-20221213","arc-20221214","arc-20221215","arc-20221216","arc-20221217","arc-20221218","arc-20221219","arc-20221220","arc-20221221","arc-20221222","arc-20221223","arc-20221224","arc-20221225","arc-20221226","arc-20221227","arc-20221228","arc-20221229","arc-20221230","arc-20221231","arc-20230101","arc-20230102","arc-20230103","arc-20230104","arc-20230105","arc-20230106","arc-20230107","arc-20230108","arc-20230109","arc-20230110","arc-20230111","arc-20230112","arc-20230113","arc-20230114","arc-20230115","arc-20230116","arc-20230117","arc-20230118","arc-20230119","arc-20230120","arc-20230121","arc-20230122","arc-20230123","arc-20230124","arc-20230125","arc-20230126","arc-20230127","arc-20230128","arc-20230129","arc-20230130","arc-20230131","arc-20230201","arc-20230202","arc-20230203","arc-20230204","arc-20230205","arc-20230206","arc-20230207","arc-20230208","arc-20230209","arc-20230210","arc-20230211","arc-20230212","arc-20230213","arc-20230214","arc-20230215","arc-20230216","arc-20230217","arc-20230218","arc-20230219","arc-20230220","arc-20230221","arc-20230222","arc-20230223","arc-20230224","arc-20230225","arc-20230226","arc-20230227","arc-20230228","arc-20230301","arc-20230302","arc-20230303","arc-20230304","arc-20230305","arc-20230306","arc-20230307","arc-20230308","arc-20230309","arc-20230310","arc-20230311","arc-20230312","arc-20230313","arc-20230314","arc-20230315","arc-20230316","arc-20230317","arc-20230318","arc-20230319","arc-20230320","arc-20230321","arc-20230322","arc-20230323","arc-20230324","arc-20230325","arc-20230326","arc-20230327","arc-20230328","arc-20230329","arc-20230330","arc-20230331","arc-20230401","arc-20230402","arc-20230403","arc-20230404","arc-20230405","arc-20230406","arc-20230407","arc-20230408","arc-20230409","arc-20230410","arc-20230411","arc-20230412","arc-20230413","arc-20230414","arc-20230415","arc-20230416","arc-20230417","arc-20230418","arc-20230419","arc-20230420","arc-20230421","arc-20230422","arc-20230423","arc-20230424","arc-20230425","arc-20230426","arc-20230427","arc-20230428","arc-20230429","arc-20230430","arc-20230501","arc-20230502","arc-20230503","arc-20230504","arc-20230505","arc-20230506","arc-20230507","arc-20230508","arc-20230509","arc-20230510","arc-20230511","arc-20230512","arc-20230513","arc-20230514","arc-20230515","arc-20230516","arc-20230517","arc-20230518","arc-20230519","arc-20230520","arc-20230521","arc-20230522","arc-20230523","arc-20230524","arc-20230525","arc-20230526","arc-20230527","arc-20230528","arc-20230529","arc-20230530","arc-20230531","arc-20230601","arc-20230602","arc-20230603","arc-20230604","arc-20230605","arc-20230606","arc-20230607","arc-20230608","arc-20230609","arc-20230610","arc-20230611","arc-20230612","arc-20230613","arc-20230614","arc-20230615","arc-20230616","arc-20230617","arc-20230618","arc-20230619","arc-20230620","arc-20230621","arc-20230622","arc-20230623","arc-20230624","arc-20230625","arc-20230626","arc-20230627","arc-20230628","arc-20230629","arc-20230630","arc-20230701","arc-20230702","arc-20230703","arc-20230704","arc-20230705","arc-20230706","arc-20230707","arc-20230708","arc-20230709","arc-20230710","arc-20230711","arc-20230712","arc-20230713","arc-20230714","arc-20230715","arc-20230716","arc-20230717","arc-20230718","arc-20230719","arc-20230720","arc-20230721","arc-20230722","arc-20230723","arc-20230724","arc-20230725","arc-20230726","arc-20230727","arc-20230728","arc-20230729","arc-20230730","arc-20230731","arc-20230801","arc-20230802","arc-20230803","arc-20230804","arc-20230805","arc-20230806","arc-20230807","arc-20230808","arc-20230809","arc-20230810","arc-20230811","arc-20230812","arc-20230813","arc-20230814","arc-20230815","arc-20230816","arc-20230817","arc-20230818","arc-20230819","arc-20230820","arc-20230821","arc-20230822","arc-20230823","arc-20230824","arc-20230825","arc-20230826","arc-20230827","arc-20230828","arc-20230829","arc-20230830","arc-20230831","arc-20230901","arc-20230902","arc-20230903","arc-20230904","arc-20230905","arc-20230906","arc-20230907","arc-20230908","arc-20230909","arc-20230910","arc-20230911","arc-20230912","arc-20230913","arc-20230914","arc-20230915","arc-20230916","arc-20230917","arc-20230918","arc-20230919","arc-20230920","arc-20230921","arc-20230922","arc-20230923","arc-20230924","arc-20230925","arc-20230926","arc-20230927","arc-20230928","arc-20230929","arc-20230930","arc-20231001","arc-20231002","arc-20231003","arc-20231004","arc-20231005","arc-20231006","arc-20231007","arc-20231008","arc-20231009","arc-20231010","arc-20231011","arc-20231012","arc-20231013","arc-20231014","arc-20231015","arc-20231016","arc-20231017","arc-20231018","arc-20231019","arc-20231020","arc-20231021","arc-20231022","arc-20231023","arc-20231024","arc-20231025","arc-20231026","arc-20231027","arc-20231028","arc-20231029","arc-20231030","arc-20231031","arc-20231101","arc-20231102","arc-20231103","arc-20231104","arc-20231105","arc-20231106","arc-20231107","arc-20231108","arc-20231109","arc-20231110","arc-20231111","arc-20231112","arc-20231113","arc-20231114","arc-20231115","arc-20231116","arc-20231117","arc-20231118","arc-20231119","arc-20231120","arc-20231121","arc-20231122","arc-20231123","arc-20231124","arc-20231125","arc-20231126","arc-20231127","arc-20231128","arc-20231129","arc-20231130","arc-20231201","arc-20231202","arc-20231203","arc-20231204","arc-20231205","arc-20231206","arc-20231207","arc-20231208","arc-20231209","arc-20231210","arc-20231211","arc-20231212","arc-20231213","arc-20231214","arc-20231215","arc-20231216","arc-20231217","arc-20231218","arc-20231219","arc-20231220","arc-20231221","arc-20231222","arc-20231223","arc-20231224","arc-20231225","arc-20231226","arc-20231227","arc-20231228","arc-20231229","arc-20231230","arc-20231231","arc-20240101"];

DKIMSelectors = DKIMSelectors.concat(DKIMCustomSelectors);
ARCSelectors = ARCSelectors.concat(ARCCustomSelectors);
DKIMCustomSelectors = null;
ARCCustomSelectors = null;

// // Dynamically add every date between 20100101 and 20240101
// let startDate = new Date(2011, 9, 1);
// let endDate = new Date(2024, 0, 1);
// let currentDate = startDate;
// while (currentDate <= endDate) {
//     let year = currentDate.getFullYear();
//     let month = String(currentDate.getMonth() + 1).padStart(2, '0');
//     let day = String(currentDate.getDate()).padStart(2, '0');

//     let yyyymmdd = `${year}${month}${day}`;
//     DKIMSelectors.push(yyyymmdd)
//     if(year >= 2019){
//         ARCSelectors.push("arc-" + yyyymmdd)
//     }

//     currentDate.setDate(currentDate.getDate() + 1);
// }

// Global variable to check if the root domain's dmarc policy is set to reject. This is important for subdomains
let DMARCSubDomainSpoofable = true;
let SPFSubDomainSpoofable = true;

const RED = `<span style="color: red;">`;
const BLUE = `<span style="color: blue;">`;
const GREEN = `<span style="color: green;">`;
const END = `</span>`;

document.addEventListener('DOMContentLoaded', function () {
    function getCurrentTabUrl(callback) {
        browser.tabs.query({
            active: true,
            currentWindow: true
        }, function (tabs) {
            const tab = tabs[0];
            const url = tab.url;
            callback(url);
        });
    }

    function notify(title, message) {
        browser.notifications.create("domain-notification", {
            "type": "basic",
            "iconUrl": browser.runtime.getURL("icons/mailfail-128x128.png"),
            "title": title,
            "message": message
        });
    }

    function incrementBadgeForCurrentTab() {
        badge += 1;
        browser.runtime.sendMessage({
            action: "updateBadge",
            number: badge
        });
    }

    async function fetchDomainInfo(domainName) {
        const apiUrl = `https://rdap.net/domain/${domainName}`;
        try {
            const response = await fetch(apiUrl, {
                credentials: 'omit',
                headers: {
                    'Accept': '*/*',
                    'Accept-Language': 'en-US,en;q=0.5',
                },
                method: 'GET',
                redirect: 'follow', // Follow redirects automatically
                mode: 'cors'
            });

            if (response.status === 200) {
                return false; // The domain can not be registered
            } else if (response.status === 404) {
                return true; // The domain can be registered
            } else {
                console.error('Error fetching domain info');
                throw new Error(`Network response for ${domainName} was not ok`, response.status);
            }
        } catch (error) {
            console.error('Error fetching domain info:', error);
            throw error; // Rethrow the error to be caught by the caller
        }
    }

    async function checkSPFDomainAvailable(DNSRecord) {
        const includeRegex = /include:([^ ]+)/g;
        const redirectRegex = /redirect=([^ ]+)/g;
        const spfDomains = [];

        let match;
        while ((match = includeRegex.exec(DNSRecord)) !== null) {
            spfDomains.push(getRootDomain(match[1]));
        }

        while ((match = redirectRegex.exec(DNSRecord)) !== null) {
            spfDomains.push(getRootDomain(match[1]));
        }

        const uniqueSPFDomains = Array.from(new Set(spfDomains)); // Get unique SPF domains
        const availabilityResults = await Promise.all(uniqueSPFDomains.map(fetchDomainInfo)); // Fetch availability for each domain

        const availableDomains = [];
        availabilityResults.forEach((availability, index) => {
            if (availability) {
                availableDomains.push(uniqueSPFDomains[index]); // Push available domain into the array
            }
        });

        // Encode HTML entities for availableDomains and uniqueSPFDomains
        const encodedAvailableDomains = availableDomains.map(encodeHtmlEntities);
        const encodedUniqueSPFDomains = uniqueSPFDomains.map(encodeHtmlEntities);

        return [encodedAvailableDomains, encodedUniqueSPFDomains]; // Return array of available domains
    }


    function highlightSubstrings(DNSRecordList, redArray, blueArray, greenArray, eachRecord) {
        let highlightedRecord = eachRecord;

        const replaceWithColor = (substring, color) => {
            // Check if the substring starts and ends with a space
            const startsWithSpace = /^\s/.test(substring);
            const endsWithSpace = /\s$/.test(substring);

            // Add spaces around the substring if necessary
            if (startsWithSpace && endsWithSpace) {
                return ` <span style="color: ${color};">${substring}</span> `;
            } else {
                return `<span style="color: ${color};">${substring}</span>`;
            }
        };


        // Function to escape regular expression special characters
        const escapeRegExp = (string) => string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

        redArray.forEach(substring => {
            if (substring) {
                highlightedRecord = highlightedRecord.replace(new RegExp(escapeRegExp(substring), 'g'), match => replaceWithColor(match, 'red'));
            }
        });

        blueArray.forEach(substring => {
            if (substring) {
                highlightedRecord = highlightedRecord.replace(new RegExp(escapeRegExp(substring), 'g'), match => replaceWithColor(match, 'blue'));
            }
        });

        greenArray.forEach(substring => {
            if (substring) {
                highlightedRecord = highlightedRecord.replace(new RegExp(escapeRegExp(substring), 'g'), match => replaceWithColor(match, 'green'));
            }
        });

        addItemToDNSRecordList(highlightedRecord, DNSRecordList);
    }

    // Replaces (<, >, &, ', ", and characters in the range \u00A0 to \u9999) with their respective HTML entity representations
    function encodeHtmlEntities(str) {
        return str.replace(/[\u00A0-\u9999<>&'"]/gim, function (i) {
            return '&#' + i.charCodeAt(0) + ';';
        });
    }

    function addItemToDNSRecordList(text, DNSRecordList) {
        const DNSRecord = document.createElement('li');
        DNSRecord.style.fontWeight = 'bold';
        DNSRecord.innerHTML = text; // Dynamic Values are HTML Entities Encoded
        DNSRecordList.appendChild(DNSRecord);
    }

    function createHeader(PopUpDiv, domainName, headerText, link) {
        const domainLink = document.createElement('a');
        domainLink.href = link;
        domainLink.innerHTML = `<h2>${domainName} ${headerText}:</h2>`; // Dynamic Values are HTML Entities Encoded
        domainLink.style.textDecoration = 'none'
        domainLink.style.fontWeight = 'bold';
        PopUpDiv.appendChild(domainLink);
    }

    function checkRecord(apiUrl, domainName, headerText) {
        let SPFExists = false;
        let DMARCCount = 0;
        const isSubDomain = domainName.split(".").length > 2; // If there's more than one period, there will be at least 2 elements in the array
        fetch(apiUrl, {
            headers: {
                'Accept': 'application/dns-json'
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Network response for ${headerText} was not ok`);
                }
                return response.json();
            })
            .then(JSONData => {
                let container = document.querySelector('.container');
                const PopUpDiv = document.createElement('div');

                const DNSRecordList = document.createElement('ul');

                // If the DNS record has no results
                if (!JSONData.Answer || JSONData.Answer.length === 0) {
                    if (headerText === "MX") {
                        addItemToDNSRecordList(`No ${headerText} Record Found. This Domain can't Recieve Emails.`, DNSRecordList);
                    }
                } else {
                    JSONData.Answer.forEach(async (record) => {
                        let eachRecord = encodeHtmlEntities(record.data.replace(/^\"|\"$/g, '')); // Remove leading and trailing quotes
                        if (headerText === "SPF") {
                            if (eachRecord.includes("v=spf1") && !eachRecord.startsWith("v=spf1")) {
                                SPFExists = true;
                                incrementBadgeForCurrentTab();
                                addItemToDNSRecordList(`${RED}The SPF record did not start with 'v=spf1'. The Record is Invalid and Email Spoofing is Possible.${END}`, DNSRecordList);
                            } else if (eachRecord.includes("v=spf1")) {
                                SPFExists = true;
                                if (!isSubDomain) {
                                    if (eachRecord.includes("+all")) {
                                        SPFSubDomainSpoofable = true;
                                    } else if (eachRecord.includes("?all")) {
                                        SPFSubDomainSpoofable = true;
                                    } else {
                                        SPFSubDomainSpoofable = false;
                                    }
                                }
                                let red = ["+all", "?all", "v=spf2.0"];
                                let blue = ["redirect=", "exp=", "exists:", " a ", " mx ", " ptr ", " +mx ", " +a ", "+ptr", "/64", "/6", "/7", "/8", "/9", "/10", "/11", "/12", "/13", "/14", "/15", "/16", "/17", "/18", "/19", "/20", "/21", "/22","/23", "/24", "%{i}", "%{h}", "%{d}"];
                                let green = ["-all", "~all"];
                                highlightSubstrings(DNSRecordList, red, blue, green, eachRecord);
                                CIDR_Ranges = ["/64", "/6", "/7", "/8", "/9", "/10", "/11", "/12", "/13", "/14", "/15", "/16", "/17", "/18", "/19", "/20", "/21", "/22","/23", "/24"];
                                if (CIDR_Ranges.some(substring => eachRecord.includes(substring))) {
                                    const smtp_relay = `<a href="https://mailtrap.io/blog/smtp-relay/"><img src=icons/info.jpg style=width:20px;height:20px;></a>`
                                    addItemToDNSRecordList(`${smtp_relay} ${BLUE}Check if Any IPs Within the CIDR Ranges are Open Relays.${END}</br>nmap -p25 --script smtp-open-relay 10.10.10.10 -v`, DNSRecordList);
                                }
                                if (!eachRecord.includes("~all") && !eachRecord.includes("-all")) {
                                    incrementBadgeForCurrentTab();
                                    addItemToDNSRecordList(`${RED}Neither ~all or -all were Found. Email Spoofing is Possible.${END}`, DNSRecordList);
                                }
                                await checkSPFDomainAvailable(eachRecord)
                                    .then(([availableDomains, spfDomains]) => {
                                        if (availableDomains.length > 0) {
                                            addItemToDNSRecordList(`One or More of the SPF Domain(s) are Available to Purchase! ${RED}[ ${availableDomains.join(", ")} ]${END}`, DNSRecordList);
                                            incrementBadgeForCurrentTab();
                                            notify("Serious SPF Misconfiguration Found", "The SPF record included reference to an authoritative domain that you can purchase and spoof valid emails from");
                                        } else {
                                            addItemToDNSRecordList(`No SPF Domains Available to Purchase [ ${spfDomains.join(", ")} ]`, DNSRecordList);
                                        }
                                    });
                            }
                        }
                        if (headerText == "_SPF") {
                            if (eachRecord.includes("v=spf1")) {
                                addItemToDNSRecordList(`${BLUE}${eachRecord}${END}`, DNSRecordList);
                                const rfc7208_3_1 = `<a href="https://datatracker.ietf.org/doc/html/rfc7208#section-3.1"><img src=icons/info.jpg style=width:20px;height:20px;></a>`
                                addItemToDNSRecordList(`${rfc7208_3_1} The _spf.${domainName} TXT Record Has Been Deprecated Since 2014. However, It May Be Used by the "include" or "redirect" Mechanism.`, DNSRecordList);
                            }
                        }
                        if (headerText === "DMARC" && eachRecord.includes("v=DMARC1")) {
                            DMARCExists = true;
                            DMARCCount += 1;
                            let red = ["sp=none", "p=none", "fo=0"];
                            let blue = ["aspf=r", "adkim=r", "fo=d", "fo=s"];
                            let green = ["sp=reject", "sp=quarantine", "p=reject", "p=quarantine", "rua=", "ruf=", "adkim=s", "aspf=s", "pct=100", "fo=1", "mailto:"];

                            if (!eachRecord.startsWith("v=DMARC1")) {
                                red.push("v=DMARC1");
                                incrementBadgeForCurrentTab();
                            } if (eachRecord.includes("pct=") && !eachRecord.includes("pct=100")) {
                                red.push("pct=");
                                incrementBadgeForCurrentTab();
                            }
                            highlightSubstrings(DNSRecordList, red, blue, green, eachRecord);
                            if (eachRecord.includes("pct=") && !eachRecord.includes("pct=100")) {
                                addItemToDNSRecordList(`${RED}The pct= Tag was not Set to 100. Email Spoofing is Possible.${END}`, DNSRecordList);
                            }
                            // Check if p=quarantine or reject is present for the main policy. This gets tricky with sp=
                            const policy_regex_q = /[" ;](p=quarantine)/;
                            const policy_regex_r = /[" ;](p=reject)/;
                            if (!policy_regex_q.test(eachRecord) && !policy_regex_r.test(eachRecord)) {
                                incrementBadgeForCurrentTab();
                                addItemToDNSRecordList(`${RED}Neither p=quarantine or p=reject were found. Email Spoofing is Possible.${END}`, DNSRecordList);
                            }
                            const policy_regex = /[" ;](p=)/;
                            if (!policy_regex.test(eachRecord)) {
                                incrementBadgeForCurrentTab();
                                addItemToDNSRecordList(`${RED}A Domain Policy (p=) is Missing. Email Spoofing is Possible.${END}`, DNSRecordList);
                            } if (eachRecord.includes("sp=none")) {
                                incrementBadgeForCurrentTab();
                                addItemToDNSRecordList(`${RED}The Subdomain Policy (sp=none) is Too Permissive. Email Spoofing with a Subdomain is Possible.${END}`, DNSRecordList);
                            } if (eachRecord.includes("fo=1") && !eachRecord.includes("ruf=")) {
                                const rfc7489_6_3 = `<a href="https://datatracker.ietf.org/doc/html/rfc7489#section-6.3"><img src=icons/info.jpg style=width:20px;height:20px;></a>`
                                addItemToDNSRecordList(`${rfc7489_6_3} Forensic Reporting Enabled (fo=1) Without a Delivery Address (ruf=). No Forensic DMARC Reports are Sent.`, DNSRecordList);
                            } if (!eachRecord.includes("fo=1") && eachRecord.includes("ruf=")) {
                                const rfc7489_6_3 = `<a href="https://datatracker.ietf.org/doc/html/rfc7489#section-6.3"><img src=icons/info.jpg style=width:20px;height:20px;></a>`
                                addItemToDNSRecordList(`${rfc7489_6_3} Forensic Address Specified (ruf=) Without Forensic Reports Enabled (fo=1). DMARC Reports are Sent only if All Underlying Authentication Mechanisms (SPF/DKIM) Fail.`, DNSRecordList);
                            } if (eachRecord.includes("rua=") && !eachRecord.includes("rua=mailto:")) {
                                incrementBadgeForCurrentTab();
                                const rfc7489_6_3 = `<a href="https://datatracker.ietf.org/doc/html/rfc7489#section-6.3"><img src=icons/info.jpg style=width:20px;height:20px;></a>`
                                addItemToDNSRecordList(`${rfc7489_6_3} ${RED}Malformed rua= Missing "mailto:". No Aggregate DMARC Reports are Sent.${END}`, DNSRecordList);
                            } if (eachRecord.includes("ruf=") && !eachRecord.includes("ruf=mailto:")) {
                                incrementBadgeForCurrentTab();
                                const rfc7489_6_3 = `<a href="https://datatracker.ietf.org/doc/html/rfc7489#section-6.3"><img src=icons/info.jpg style=width:20px;height:20px;></a>`
                                addItemToDNSRecordList(`${rfc7489_6_3} ${RED}Malformed ruf= Missing "mailto:". No Forensic DMARC Reports are Sent.${END}`, DNSRecordList);
                            } if (!isSubDomain) { // if root domain
                                if (eachRecord.includes("sp=none")) {
                                    DMARCSubDomainSpoofable = true;
                                } else if (!eachRecord.includes("sp=") && eachRecord.includes("p=none")) {
                                    DMARCSubDomainSpoofable = true;
                                } else if (eachRecord.includes("sp=none") && eachRecord.includes("p=none")) {
                                    DMARCSubDomainSpoofable = true;
                                } else if (!eachRecord.includes("sp=") && !eachRecord.includes("p=")) {
                                    DMARCSubDomainSpoofable = true;
                                } else {
                                    DMARCSubDomainSpoofable = false;
                                }
                            }

                        }
                        if (headerText === "MX") {
                            if (!eachRecord.includes("mail.protection.outlook.com") && !eachRecord.includes("mail.protection.partner.outlook.cn") && eachRecord !== "") {
                                if (eachRecord.includes(' ')) { // Check for priority in MX record "50 mail.example.com" 
                                    const mx = eachRecord.split(' ')[1].replace(/\.$/, ''); // remove MX priority abnd trailing dot
                                    addItemToDNSRecordList(mx + `<img src="https://icons.duckduckgo.com/ip3/${getRootDomain(mx)}.ico" style=width:22px;height:22px;max-width:100%;max-height:100%;float:right;>`, DNSRecordList);
                                } else {
                                    addItemToDNSRecordList(eachRecord + `<img src="https://icons.duckduckgo.com/ip3/${getRootDomain(eachRecord.replace(/\.$/, ''))}.ico" style=width:22px;height:22px;max-width:100%;max-height:100%;float:right;>`, DNSRecordList);
                                }
                            } else if (eachRecord.includes("mail.protection.outlook.com") || eachRecord.includes("mail.protection.partner.outlook.cn")) {
                                let SMTPServer = eachRecord.split(' ')[1];
                                // Removes the warning banner added to suspicious emails in Outlook
                                const hideWarningBanner = "&lt;style&gt;table,tr{width:1px;height:1px;display:none;}&lt;/style&gt;"
                                addItemToDNSRecordList(SMTPServer + `<img src="https://icons.duckduckgo.com/ip3/${getRootDomain(SMTPServer).replace(/\.$/, '')}.ico" style=width:22px;height:22px;max-width:100%;max-height:100%;float:right;>`, DNSRecordList);
                                addItemToDNSRecordList(`${RED}Send-MailMessage -SmtpServer ${SMTPServer} -To Victim@${domainName} -From informationsecurity@${domainName} -Subject “Test” -Body “${hideWarningBanner}Test” -BodyAsHTML -DeliveryNotificationOption Never -Priority High -UseSsl${END}`, DNSRecordList);
                                incrementBadgeForCurrentTab();
                            }
                        }
                        if (headerText === "BIMI") {
                            if (eachRecord.startsWith("v=BIMI1")) {
                                const blue = ["l="];
                                const green = ["a="];
                                highlightSubstrings(DNSRecordList, [], blue, green, eachRecord);

                                var pattern = /l=([^;]+)/;
                                var match = pattern.exec(eachRecord);
                                if (match && match.length > 1) {
                                    var url = match[1];
                                    // Security Concern XSS
                                    BIMI_IMG = `<a href="${url}" class="centered"><img src=${url} style=width:50px;height:50px;max-width:100%;max-height:100%;></a>`;
                                    addItemToDNSRecordList(BIMI_IMG, DNSRecordList);
                                }
                            }
                        }
                        if (headerText === "MTA-STS") {
                            if (eachRecord.includes("v=STSv1")) {
                                if (eachRecord.startsWith("v=STSv1")) {
                                    addItemToDNSRecordList(eachRecord, DNSRecordList);
                                    MTASTS_File = fetchMtaSts(domainName).then(mtastsText => {
                                        if (mtastsText) {
                                            let red = ["mode: testing", "sts: false", "all: false", "include_subdomains: false"];
                                            let blue = ["mx:"];
                                            let green = ["mode: enforce", "sts: true", "all: true", "include_subdomains: true"];
                                            highlightSubstrings(DNSRecordList, red, blue, green, mtastsText);
                                        } else {
                                            addItemToDNSRecordList(`<a href="https://mta-sts.${domainName}/.well-known/mta-sts.txt" style="text-decoration: none; width: 200px;"><span style="color: blue;">Click Here to Download the MTA-STS Text File.</span></a>`, DNSRecordList);
                                        }
                                    });

                                } else {
                                    addItemToDNSRecordList(eachRecord, DNSRecordList);
                                    addItemToDNSRecordList(`${RED}Invalid MTA-STS Record. It Must Start with "v=STSv1".${END}`, DNSRecordList);
                                    MTASTS_File = fetchMtaSts(domainName).then(mtastsText => {
                                        if (mtastsText) {
                                            addItemToDNSRecordList(mtastsText, DNSRecordList);
                                        } else {
                                            addItemToDNSRecordList(`<a href="https://mta-sts.${domainName}/.well-known/mta-sts.txt" style="text-decoration: none; width: 200px;"><span style="color: blue;">Click Here to Get the MTA-STS Text File.</span></a>`, DNSRecordList);
                                        }
                                    });
                                }
                            }
                        }

                    });
                }

                // These headers should always show up
                if (headerText === "SPF") {
                    createHeader(PopUpDiv, domainName, headerText, `https://dmarcian.com/spf-survey/?domain=${domainName}`);
                } else if (headerText === "DMARC") {
                    createHeader(PopUpDiv, domainName, headerText, `https://dmarcian.com/dmarc-inspector/?domain=${domainName}`);
                } else if (headerText === "MX") {
                    createHeader(PopUpDiv, domainName, headerText, `https://mxtoolbox.com/SuperTool.aspx?action=mx%3a${domainName}&run=toolpage`);
                }

                // Only add these headers if the data was found
                if (DNSRecordList.innerText !== "") {
                    if (headerText === "MTA-STS") {
                        createHeader(PopUpDiv, domainName, headerText, `https://mta-sts.${domainName}/.well-known/mta-sts.txt`);
                    } else if (headerText === "BIMI") {
                        createHeader(PopUpDiv, domainName, headerText, `https://bimigroup.org/bimi-generator/`);
                    } else if (headerText === "_SPF") {
                        createHeader(PopUpDiv, `_spf.${domainName}`, "SPF", `https://repost.aws/knowledge-center/route53-spf-record`);
                    }
                }

                // if the subdomain is not spoofable and the subdomain record doesnt exist
                if (isSubDomain && !SPFSubDomainSpoofable && !SPFExists && headerText === "SPF") {
                    addItemToDNSRecordList(`No Subdomain SPF Record Found. The Root Domain SPF Policy is Applied.`, DNSRecordList);
                } else if (headerText === "SPF" && !SPFExists && SPFSubDomainSpoofable && isSubDomain) {
                    incrementBadgeForCurrentTab();
                    addItemToDNSRecordList(`${RED}No SPF Record Found or the Root Domain was Misconfigured. Email Spoofing is Possible.${END}`, DNSRecordList);
                } else if (headerText === "SPF" && !SPFExists && SPFSubDomainSpoofable && !isSubDomain) {
                    incrementBadgeForCurrentTab();
                    addItemToDNSRecordList(`${RED}No SPF Record Found. Email Spoofing is Possible.${END}`, DNSRecordList);
                }

                // if the subdomain is not spoofable and the subdomain record doesnt exist
                if (isSubDomain && !DMARCSubDomainSpoofable && DMARCCount === 0 && headerText === "DMARC") {
                    const rfc7489_6_3 = `<a href="https://datatracker.ietf.org/doc/html/rfc7489#section-6.3"><img src=icons/info.jpg style=width:20px;height:20px;></a>`
                    addItemToDNSRecordList(`${rfc7489_6_3} No Subdomain DMARC Record Found. The Root Domain DMARC Policy is Applied.`, DNSRecordList);
                } else if (DMARCCount === 0 && headerText === "DMARC" && isSubDomain) {
                    incrementBadgeForCurrentTab();
                    addItemToDNSRecordList(`${RED}No DMARC Record Found or the Root Domain was Misconfigured. Email Spoofing is Possible.${END}`, DNSRecordList);
                } else if (DMARCCount === 0 && headerText === "DMARC" && !isSubDomain) {
                    incrementBadgeForCurrentTab();
                    addItemToDNSRecordList(`${RED}No DMARC Record Found. Email Spoofing is Possible.${END}`, DNSRecordList);
                }
                // If there are more than one valid DMARC records then DMARC discovery will fail
                if (DMARCCount > 1 && headerText === "DMARC") {
                    incrementBadgeForCurrentTab();
                    const rfc7489_6_6_3 = `<a href="https://datatracker.ietf.org/doc/html/rfc7489#section-6.6.3"><img src=icons/info.jpg style=width:20px;height:20px;></a>`
                    addItemToDNSRecordList(`${rfc7489_6_6_3} ${RED}Multiple DMARC Records Found. Email Spoofing is Possible.${END}`, DNSRecordList);
                }

                PopUpDiv.appendChild(DNSRecordList);
                container.appendChild(PopUpDiv);

            })
            .catch(error => {
                console.error(`Error fetching ${headerText} results:`, error);
            });
    }

    async function fetchMtaSts(domainName) {
        try {
            const url = `https://mta-sts.${domainName}/.well-known/mta-sts.txt`;
            const response = await fetch(url);

            if (!response.ok) {
                return null;
            }

            const text = await response.text();
            return text;
        } catch (error) {
            return null;
        }
    }


    async function getRSAKeySize(dkimRecord, selector) {
        if (selector === "m1") {
            let a = 0;
        }
        const pMatch = dkimRecord.match(/p=([^\s;]+)/);
        if (!pMatch) return 0; // Couldn't find the RSA key

        const key = pMatch[1];
        try {
            const keyBinaryString = atob(key); // Decode Base64 string
            const keyUint8Array = new Uint8Array(keyBinaryString.length);
            for (let i = 0; i < keyBinaryString.length; ++i) {
                keyUint8Array[i] = keyBinaryString.charCodeAt(i);
            }
            const keyImported = await crypto.subtle.importKey(
                "spki",
                keyUint8Array.buffer,
                { name: "RSA-PSS", hash: "SHA-256" },
                true,
                ["verify"]
            );

            return keyImported.algorithm.modulusLength;
        } catch (error) {
            console.error("Error importing RSA key:", error, selector);
            return null;
        }
    }


    async function getDKIMRecord(DKIMRecord) {
        const response = await fetch(DKIMRecord, {
            headers: {
                'Accept': 'application/dns-json'
            }
        });
        if (!response.ok) {
            return null;
        }

        const data = await response.json();
        const dkimRecords = data.Answer && data.Answer.filter(record => record.type === 16); // TXT records have type 16
        if (!dkimRecords || dkimRecords.length === 0) {
            return null;
        }

        // Assume first TXT record contains DKIM information
        return dkimRecords[0].data;
    }

    async function DKIM(domainName) {
        const container = document.querySelector('.container');
        const PopUpDiv = document.createElement('div');
        const DNSRecordList = document.createElement('ul');
        let num_DKIM = 0;
        createHeader(PopUpDiv, domainName, "DKIM", `https://dmarcian.com/dkim-inspector/?domain=${domainName}`);
        const DKIMRecordPromises = DKIMSelectors.map(async (selector) => {
            const DKIMURL = `https://cloudflare-dns.com/dns-query?name=${selector}._domainkey.${domainName}&type=TXT`;
            let dkimRecord = await getDKIMRecord(DKIMURL);
            if (dkimRecord) {
                num_DKIM += 1;
                dkimRecord = dkimRecord.replace(/"/g, ''); // Remove all quotes
                const rsaKeySize = await getRSAKeySize(dkimRecord, selector); // can return null
                if (rsaKeySize && rsaKeySize < 1024) {
                    incrementBadgeForCurrentTab();
                    addItemToDNSRecordList(`RSA-Key Size: ${RED}${rsaKeySize}${END}</br>` + `Selector: ${RED}${selector}${END}</br>${RED}${selector}._domainkey.${domainName}${END}</br></br>` + dkimRecord, DNSRecordList);
                    const Cado_NFS_Tut = `<a href="https://yurichev.com/news/20220210_RSA/"><img src=icons/info.jpg style=width:20px;height:20px;></a>`
                    addItemToDNSRecordList(`${Cado_NFS_Tut} ${RED}Cryptographically Insecure Selector "${selector}" Detected. DKIM Private Key Can be Recovered.${END}`, DNSRecordList);
                    notify("Cryptographically Broken RSA Key", `The ${selector} DKIM selector on ${domainName} uses a ${rsaKeySize}-bit RSA key.`);
                } else if (rsaKeySize && rsaKeySize >= 1024) {
                    addItemToDNSRecordList(`RSA-Key Size: ${GREEN}${rsaKeySize}${END}</br>` + `Selector: ${BLUE}${selector}${END}</br>${BLUE}${selector}._domainkey.${domainName}${END}</br></br>` + dkimRecord, DNSRecordList);
                } else if (!rsaKeySize) { // if null then key is corrupted
                    incrementBadgeForCurrentTab();
                    addItemToDNSRecordList(`RSA-Key Size: ${RED}Corrupted Key!${END}</br>` + `Selector: ${RED}${selector}${END}</br>${RED}${selector}._domainkey.${domainName}${END}</br></br>` + dkimRecord, DNSRecordList);
                }
                if (rsaKeySize && !dkimRecord.startsWith("v=DKIM1")) {  //https://datatracker.ietf.org/doc/html/rfc6376/#section-3.6.1
                    incrementBadgeForCurrentTab();
                    const rfc6376_3_6_1 = `<a href="https://datatracker.ietf.org/doc/html/rfc6376/#section-3.6.1"><img src=icons/info.jpg style=width:20px;height:20px;></a>`
                    addItemToDNSRecordList(`${rfc6376_3_6_1} ${RED}DKIM Record Does Not Conform to RFC-6376 Specifications. It Must Start With v=DKIM1. It Might be an ARC Key.${END}`, DNSRecordList);
                }
            }
        });

        await Promise.all(DKIMRecordPromises);
        if (num_DKIM > 0) {
            PopUpDiv.appendChild(DNSRecordList);
            container.appendChild(PopUpDiv);
        } else {
            addItemToDNSRecordList(`This Domain Does Not Likely Use DKIM.`, DNSRecordList);
            PopUpDiv.appendChild(DNSRecordList);
            container.appendChild(PopUpDiv);
        }

    }

    async function ARC(domainName) {
        const container = document.querySelector('.container');
        const PopUpDiv = document.createElement('div');
        const DNSRecordList = document.createElement('ul');
        let num_ARC = 0;
        createHeader(PopUpDiv, domainName, "ARC", `https://proton.me/blog/what-is-authenticated-received-chain-arc`);
        const ARCRecordPromises = ARCSelectors.map(async (selector) => {
            const ARCURL = `https://cloudflare-dns.com/dns-query?name=${selector}._domainkey.${domainName}&type=TXT`;
            let ARCRecord = await getDKIMRecord(ARCURL);
            if (ARCRecord) {
                num_ARC += 1;
                ARCRecord = ARCRecord.replace(/"/g, ''); // Remove all quotes
                const rsaKeySize = await getRSAKeySize(ARCRecord, selector); // can return null
                if (rsaKeySize && rsaKeySize < 1024) {
                    incrementBadgeForCurrentTab();
                    addItemToDNSRecordList(`RSA-Key Size: ${RED}${rsaKeySize}${END}</br>` + `Selector: ${RED}${selector}${END}</br>${RED}${selector}._domainkey.${domainName}${END}</br></br>` + ARCRecord, DNSRecordList);
                    const Cado_NFS_Tut = `<a href="https://yurichev.com/news/20220210_RSA/"><img src=icons/info.jpg style=width:20px;height:20px;></a>`
                    addItemToDNSRecordList(`${Cado_NFS_Tut} ${RED}Cryptographically Insecure Selector "${selector}" Detected. ARC Private Key Can be Recovered.${END}`, DNSRecordList);
                    notify("Cryptographically Broken RSA Key", `The ${selector} ARC selector on ${domainName} uses a ${rsaKeySize}-bit RSA key.`);
                } else if (rsaKeySize && rsaKeySize >= 1024) {
                    addItemToDNSRecordList(`RSA-Key Size: ${GREEN}${rsaKeySize}${END}</br>` + `Selector: ${BLUE}${selector}${END}</br>${BLUE}${selector}._domainkey.${domainName}${END}</br></br>` + ARCRecord, DNSRecordList);
                } else if (!rsaKeySize) { // if null then key is corrupted
                    incrementBadgeForCurrentTab();
                    addItemToDNSRecordList(`RSA-Key Size: ${RED}Corrupted Public Key!${END}</br>` + `Selector: ${RED}${selector}${END}</br>${RED}${selector}._domainkey.${domainName}${END}</br></br>` + ARCRecord, DNSRecordList);
                }
                // No version tag in ARC https://datatracker.ietf.org/doc/html/rfc8617#section-4.1.2
            }
        });

        await Promise.all(ARCRecordPromises);
        if (num_ARC > 0) {
            PopUpDiv.appendChild(DNSRecordList);
            container.appendChild(PopUpDiv);
        } else {
            addItemToDNSRecordList(`This Domain Does Not Likely Use ARC.`, DNSRecordList);
            PopUpDiv.appendChild(DNSRecordList);
            container.appendChild(PopUpDiv);
        }

    }

    function fetchMailCheckResults(subDomain, rootDomain) {
        // Check Root Domain
        if (subDomain !== rootDomain) {
            const apiUrlTXTRoot = `https://cloudflare-dns.com/dns-query?name=${rootDomain}&type=TXT`;
            const apiUrlOldSPFRoot = `https://cloudflare-dns.com/dns-query?name=_spf.${rootDomain}&type=TXT`;
            const apiUrlMXRoot = `https://cloudflare-dns.com/dns-query?name=${rootDomain}&type=MX`;
            const apiUrlDMARCRoot = `https://cloudflare-dns.com/dns-query?name=_dmarc.${rootDomain}&type=TXT`;
            const apiUrlBIMIRoot = `https://cloudflare-dns.com/dns-query?name=default._bimi.${rootDomain}&type=TXT`;
            const apiUrlMTASTSRoot = `https://cloudflare-dns.com/dns-query?name=_mta-sts.${rootDomain}&type=TXT`;
            checkRecord(apiUrlMXRoot, rootDomain, 'MX');
            checkRecord(apiUrlTXTRoot, rootDomain, 'SPF');
            checkRecord(apiUrlOldSPFRoot, rootDomain, '_SPF');
            checkRecord(apiUrlDMARCRoot, rootDomain, 'DMARC');
            checkRecord(apiUrlBIMIRoot, rootDomain, 'BIMI');
            checkRecord(apiUrlMTASTSRoot, rootDomain, 'MTA-STS');
            DKIM(rootDomain);
            ARC(rootDomain);
        }
        // Check Subdomain
        const apiUrlTXT = `https://cloudflare-dns.com/dns-query?name=${subDomain}&type=TXT`;
        const apiUrlOldSPF = `https://cloudflare-dns.com/dns-query?name=_spf.${subDomain}&type=TXT`;
        const apiUrlMX = `https://cloudflare-dns.com/dns-query?name=${subDomain}&type=MX`;
        const apiUrlDMARC = `https://cloudflare-dns.com/dns-query?name=_dmarc.${subDomain}&type=TXT`;
        const apiUrlBIMI = `https://cloudflare-dns.com/dns-query?name=default._bimi.${subDomain}&type=TXT`;
        const apiUrlMTASTS = `https://cloudflare-dns.com/dns-query?name=_mta-sts.${subDomain}&type=TXT`;
        checkRecord(apiUrlMX, subDomain, 'MX');
        checkRecord(apiUrlTXT, subDomain, 'SPF');
        checkRecord(apiUrlOldSPF, subDomain, '_SPF');
        checkRecord(apiUrlDMARC, subDomain, 'DMARC');
        checkRecord(apiUrlBIMI, subDomain, 'BIMI');
        checkRecord(apiUrlMTASTS, subDomain, 'MTA-STS');
        DKIM(subDomain);
        ARC(subDomain);
    }

    function getRootDomain(url) {
        // Remove double quotes and single quotes from the URL
        url = url.replace(/["']/g, '');

        const temp = url.split('.').reverse();
        return temp[1] + '.' + temp[0];
    }

    getCurrentTabUrl(function (url) {
        const hostname = (new URL(url)).hostname
        if (hostname !== "") {
            const subDomain = encodeHtmlEntities(hostname);
            const rootDomain = encodeHtmlEntities(getRootDomain(hostname));

            // Update UI Links
            document.getElementById("hunterlink").href = `https://hunter.io/try/search/${rootDomain}?locale=en`;
            document.getElementById("dnsquerieslink").href = `https://www.dnsqueries.com/en/smtp_test_check.php`;
            document.getElementById("mxlink").href = `https://mxtoolbox.com/emailhealth/${rootDomain}/`;
            document.getElementById("appriver").href = `https://tools.appriver.com/SmtpTest.aspx`;
            
            fetchMailCheckResults(subDomain, rootDomain);
        } else {
            const container = document.querySelector('.container');
            const PopUpDiv = document.createElement('div');
            createHeader(PopUpDiv, hostname, "Domain is Not Valid", `#`);
            container.appendChild(PopUpDiv);
        }
    });
});
